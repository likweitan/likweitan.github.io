<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Codes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.likweitan.tech/"/>
  <updated>2021-05-31T14:32:16.459Z</updated>
  <id>http://blog.likweitan.tech/</id>
  
  <author>
    <name>likweitan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hi</title>
    <link href="http://blog.likweitan.tech/posts/d8932aac/"/>
    <id>http://blog.likweitan.tech/posts/d8932aac/</id>
    <published>2021-05-31T14:18:39.000Z</published>
    <updated>2021-05-31T14:32:16.459Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>sasaassaasasas<br>asf<br>asf<br>as<br>fsa<br>asf<br>asf</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Apache Pig: Windows Installation 安装</title>
    <link href="http://blog.likweitan.tech/posts/60b0d0b4/"/>
    <id>http://blog.likweitan.tech/posts/60b0d0b4/</id>
    <published>2020-10-14T09:55:00.000Z</published>
    <updated>2021-05-31T13:13:46.719Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Prerequisites-先决条件"><a href="#Prerequisites-先决条件" class="headerlink" title="Prerequisites 先决条件"></a>Prerequisites 先决条件</h1><ol><li><p><a href="https://hadoop.apache.org/">Apache Hadoop</a><br>Apache Pig is a platform build on the top of Hadoop. You can refer to our previously published article to install a Hadoop single node cluster on Windows 10.</p></li><li><p><a href="https://www.7-zip.org/">7zip</a>/<a href="https://www.win-rar.com/">Winrar</a><br>7zip/Winrar is needed to extract .tar.gz archives we will be downloading in this guide.</p></li></ol><h1 id="Downloading-下载-Apache-Pig"><a href="#Downloading-下载-Apache-Pig" class="headerlink" title="Downloading 下载 Apache Pig"></a>Downloading 下载 Apache Pig</h1><p>Download the <a href="https://downloads.apache.org/pig/">Apache Pig</a></p><p>After the file is downloaded, we should extract it twice using <strong>7zip</strong> (using 7zip: the first time we extract the .tar.gz file, the second time we extract the .tar file). We will extract the Pig folder into <code>C:\hadoop-env</code> directory as used in the previous articles. Or you could use <strong>winzip</strong> to extract it.</p><h1 id="Setting-Environment-Variables-设置环境变量"><a href="#Setting-Environment-Variables-设置环境变量" class="headerlink" title="Setting Environment Variables 设置环境变量"></a>Setting Environment Variables 设置环境变量</h1><p>After extracting Derby and Hive archives, we should go to Control Panel &gt; System and Security &gt; System. Then Click on <strong>Advanced system settings</strong>.</p><p>In the advanced system settings dialog, click on <strong>Environment variables</strong> button.</p><p>Now we should add the following user variables:</p><ul><li>PIG_HOME: <code>C:\hadoop-env\pig-0.17.0</code></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://miro.medium.com/max/653/1*B3DoL0H1WYff1-fWUBK8MA.png" alt="a"></p><blockquote><p><code>hadoop-env</code> is the folder name of your hadoop.</p></blockquote><p>Now, we should edit the Path user variable to add the following paths:</p><ul><li>%PIG_HOME%\bin</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://miro.medium.com/max/527/1*ZoXoknTO6tMP9A0CNyywbA.png" alt="a"></p><h1 id="Edit-pig-cmd-file"><a href="#Edit-pig-cmd-file" class="headerlink" title="Edit pig.cmd file"></a>Edit pig.cmd file</h1><p>Edit file D:/Pig/pig-0.17.0/bin/pig.cmd, make below changes and save this file.</p><ul><li>set HADOOP_BIN_PATH=%HADOOP_HOME%\libexec</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://i.ibb.co/hLpZ1w4/image.png" alt="a"></p><h1 id="Validate-Pig-Installation-验证-Pig-的安装"><a href="#Validate-Pig-Installation-验证-Pig-的安装" class="headerlink" title="Validate Pig Installation 验证 Pig 的安装"></a>Validate Pig Installation 验证 Pig 的安装</h1><p>Post successful execution of Hadoop and verify the installation.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;pig -version</span><br><span class="line">Apache Pig version 0.17.0 (r1797386)</span><br><span class="line">compiled Jun 02 2017, 15:41:58</span><br></pre></td></tr></table></figure><blockquote><p>If you have encountered any problems, please read through the Troubleshooting section.</p></blockquote><h1 id="Example-Script"><a href="#Example-Script" class="headerlink" title="Example Script"></a>Example Script</h1><h2 id="Start-the-hadoop"><a href="#Start-the-hadoop" class="headerlink" title="Start the hadoop"></a>Start the hadoop</h2><p>Browse through the sbin directory of Hadoop and start yarn and Hadoop dfs (distributed file system) as shown below.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;cd %HADOOP_HOME%/sbin/</span><br><span class="line">C:\WINDOWS\system32&gt;start-all.cmd</span><br></pre></td></tr></table></figure><blockquote><p>Remember to run as administrator when executing CMD.</p></blockquote><h2 id="Create-a-Directory-in-HDFS"><a href="#Create-a-Directory-in-HDFS" class="headerlink" title="Create a Directory in HDFS"></a>Create a Directory in HDFS</h2><p>In Hadoop DFS, you can create directories using the command mkdir. Create a new directory in HDFS with the name Pig_Data in the required path as shown below.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;cd %HADOOP_HOME%/bin/</span><br><span class="line">C:\WINDOWS\system32&gt;hdfs dfs -mkdir hdfs://localhost:9000/pig_data</span><br></pre></td></tr></table></figure><h2 id="Create-a-text-file-wikitechy-emp-details-txt-delimited-by-‘-’-with-the-content-below-Place-the-file-in-C-or-any-directory-which-you-preferred"><a href="#Create-a-text-file-wikitechy-emp-details-txt-delimited-by-‘-’-with-the-content-below-Place-the-file-in-C-or-any-directory-which-you-preferred" class="headerlink" title="Create a text file wikitechy_emp_details.txt delimited by ‘,’ with the content below. Place the file in C: or any directory which you preferred."></a>Create a text file <code>wikitechy_emp_details.txt</code> delimited by ‘,’ with the content below. Place the file in C: or any directory which you preferred.</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">111,Anu,Shankar,23,9876543210,Chennai</span><br><span class="line">112,Barvathi,Nambiayar,24,9876543211,Chennai</span><br><span class="line">113,Kajal,Nayak,24,9876543212,Trivendram</span><br><span class="line">114,Preethi,Antony,21,9876543213,Pune</span><br><span class="line">115,Raj,Gopal,21,9876543214,Hyderabad</span><br><span class="line">116,Yashika,Kannan,22,9876543215,Delhi</span><br><span class="line">117,siddu,Narayanan,22,9876543216,Kolkata</span><br><span class="line">118,Timple,Mohanthy,23,9876543217,Bhuwaneshwar</span><br></pre></td></tr></table></figure><h2 id="Move-the-file-to-HDFS"><a href="#Move-the-file-to-HDFS" class="headerlink" title="Move the file to HDFS"></a>Move the file to HDFS</h2><p>Now, move the file from the local file system to HDFS using put command as shown below. (You can use copyFromLocal command as well.)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;cd %HADOOP_HOME%/bin/</span><br><span class="line">C:\WINDOWS\system32&gt;hdfs dfs -put C:\wikitechy_emp_details.txt hdfs://localhost:9000/pig_data/</span><br></pre></td></tr></table></figure><h2 id="Start-the-Pig-Grunt-Shell"><a href="#Start-the-Pig-Grunt-Shell" class="headerlink" title="Start the Pig Grunt Shell"></a>Start the Pig Grunt Shell</h2><p>The simplest way to write PigLatin statements is using Grunt shell which is an interactive tool where we write a statement and get the desired output. There are two modes to involve Grunt Shell:</p><ol><li><strong>Local</strong>: All scripts are executed on a single machine without requiring Hadoop. (command: <code>pig -x local</code>)</li><li><strong>MapReduce</strong>: Scripts are executed on a Hadoop cluster (command: <code>pig -x MapReduce</code>)</li></ol><p>Since we have load the <code>wikitechy_emp_details.txt</code> in hdfs, start the Pig Grunt shell in MapReduce mode as shown below.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;pig -x mapreduce</span><br></pre></td></tr></table></figure><h2 id="Load-the-file-in-a-variable-‘student’"><a href="#Load-the-file-in-a-variable-‘student’" class="headerlink" title="Load the file in a variable ‘student’"></a>Load the file in a variable ‘student’</h2><p>Now load the data from the file student_data.txt into Pig by executing the following Pig Latin statement in the Grunt shell.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grunt&gt; student = LOAD <span class="string">&#x27;hdfs://localhost:9000/pig_data/wikitechy_emp_details.txt&#x27;</span></span><br><span class="line">   USING PigStorage(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">   as ( id:int, firstname:chararray, lastname:chararray, phone:chararray,</span><br><span class="line">   city:chararray );</span><br></pre></td></tr></table></figure><h2 id="Check-result-using-DUMP-operator-write-result-to-the-console"><a href="#Check-result-using-DUMP-operator-write-result-to-the-console" class="headerlink" title="Check result using DUMP operator (write result to the console)"></a>Check result using DUMP operator (write result to the console)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">grunt&gt; Dump student</span><br><span class="line">(111,Anu,Shankar,23,9876543210)</span><br><span class="line">(112,Barvathi,Nambiayar,24,9876543211)</span><br><span class="line">(113,Kajal,Nayak,24,9876543212)</span><br><span class="line">(114,Preethi,Antony,21,9876543213)</span><br><span class="line">(115,Raj,Gopal,21,9876543214)</span><br><span class="line">(116,Yashika,Kannan,22,9876543215)</span><br><span class="line">(117,siddu,Narayanan,22,9876543216)</span><br><span class="line">(118,Timple,Mohanthy,23,9876543217)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.ibb.co/wrxbbDs/image.png" alt="a"></p><blockquote><p>If you have encountered any problems, please read through the Troubleshooting section.</p></blockquote><h1 id="Troubleshooting-故障排除"><a href="#Troubleshooting-故障排除" class="headerlink" title="Troubleshooting 故障排除"></a>Troubleshooting 故障排除</h1><h2 id="Pig-is-not-recognized-as-an-internal-or-external-command"><a href="#Pig-is-not-recognized-as-an-internal-or-external-command" class="headerlink" title="Pig is not recognized as an internal or external command"></a>Pig is not recognized as an internal or external command</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;pig -version</span><br><span class="line">&#x27;E:\hadoop-env\hadoop-3.2.1\bin\hadoop-config.cmd&#x27; is not recognized as an internal or external command,</span><br><span class="line">operable program or batch file.</span><br><span class="line">&#x27;-Xmx1000M&#x27; is not recognized as an internal or external command,</span><br><span class="line">operable program or batch file.</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://miro.medium.com/max/700/1*zFUaMDFADy06wQqOUGydYw.png" alt="a"></p><p>Make sure your is correct</p><p>From this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set HADOOP_BIN_PATH=%HADOOP_HOME%\bin</span><br></pre></td></tr></table></figure><p>Change to:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set HADOOP_BIN_PATH=%HADOOP_HOME%\libexec</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.ibb.co/hLpZ1w4/image.png" alt="a"></p><h2 id="After-Dump-command-the-process-keep-looping"><a href="#After-Dump-command-the-process-keep-looping" class="headerlink" title="After Dump command, the process keep looping"></a>After <code>Dump</code> command, the process keep looping</h2><blockquote><p>Pig when ran in mapreduce mode expects the JobHistoryServer to be available.</p></blockquote><p>This is because the job history server is not running.</p><p>Check <code>marped-site.xml</code> has these properties stated or not.</p><p>To configure JobHistoryServer, <strong>add</strong> these properties to <code>mapred-site.xml</code> replacing hostname with actual name of the host where the process is started.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hostname:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hostname:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The result would be like this:</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.ibb.co/ydyG8zg/image.png" alt="a"></p><h1 id="References-参考"><a href="#References-参考" class="headerlink" title="References 参考"></a>References 参考</h1><ol><li><p><a href="https://www.solutionmandi.com/2018/11/pig-installation-on-windows-10.html">Solution Mandi - Cloud &amp; Big Data !: Pig installation on Windows 10</a></p></li><li><p><a href="https://hadoop.apache.org/docs/r2.7.1/hadoop-project-dist/hadoop-common/ClusterSetup.html">Apache Hadoop 2.7.1</a></p></li><li><p><a href="https://stackoverflow.com/questions/42740053/not-able-to-run-dump-in-pig">Not able to run dump in pig - Stackoverflow</a></p></li><li><p><a href="https://www.wikitechy.com/tutorials/apache-pig/apache-pig-running-scripts">pig tutorial - apache pig tutorial - Apache Pig - Running Scripts - pig latin - apache pig - pig hadoop</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      Install Pig on Windows
    
    </summary>
    
    
      <category term="Big Data" scheme="http://blog.likweitan.tech/categories/Big-Data/"/>
    
      <category term="Hadoop" scheme="http://blog.likweitan.tech/categories/Big-Data/Hadoop/"/>
    
    
      <category term="hadoop" scheme="http://blog.likweitan.tech/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop: Windows Installation 安装</title>
    <link href="http://blog.likweitan.tech/posts/55b85722/"/>
    <id>http://blog.likweitan.tech/posts/55b85722/</id>
    <published>2020-08-19T08:32:04.000Z</published>
    <updated>2021-05-31T13:13:46.719Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h1><ul><li>Java JDK 1.8.0</li></ul><p>Java development kit can be confirmed that has been installed in your machine through the command <code>javac -version</code>.</p><blockquote><p>Hadoop is only supported with 8 and 11 Java version.</p></blockquote><h1 id="Setup-Hadoop"><a href="#Setup-Hadoop" class="headerlink" title="Setup Hadoop"></a>Setup Hadoop</h1><h2 id="Download-Hadoop"><a href="#Download-Hadoop" class="headerlink" title="Download Hadoop"></a>Download Hadoop</h2><p>Download Hadoop 3.3.0 (Binary download) and extract with <a href="https://www.win-rar.com/download.html?L=4">Winrar</a> (Windows) or <a href="https://www.keka.io/">Keka</a> (Mac). After the hadoop-3.3.0.tar.gz has been downloaded, it has to be extracted to C:\ folder.</p><p><a href="https://hadoop.apache.org/releases.html">Download Hadoop from Apache</a></p><h2 id="Setup-Environmental-Variables"><a href="#Setup-Environmental-Variables" class="headerlink" title="Setup Environmental Variables"></a>Setup Environmental Variables</h2><p>Open the System Properties window from Control Panel and select the Environment Variables button.</p><ul><li>User Variables</li></ul><table><thead><tr><th>Variable</th><th>Value</th></tr></thead><tbody><tr><td>HADOOP_HOME</td><td>C:\hadoop-3.3.0\bin</td></tr></tbody></table><ul><li>System Variables</li></ul><table><thead><tr><th>Variable</th><th>Value</th></tr></thead><tbody><tr><td>PATH</td><td>C:\hadoop-3.3.0\bin</td></tr></tbody></table><h2 id="Configuration-Modification"><a href="#Configuration-Modification" class="headerlink" title="Configuration Modification"></a>Configuration Modification</h2><p>Edit each file and paste below xml paragraph and save each file.</p><ul><li>hadoop-3.3.0/etc/hadoop/core-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>hadoop-3.3.0/etc/hadoop/mapred-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>hadoop-3.3.0/etc/hadoop/hdfs-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>/c:/software/hadoop-3.3.0/data/namenode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>/c:/software/hadoop-3.3.0/data/datanode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Remember to replace <code>/c:/software/hadoop-3.3.0</code> with your hadoop root directory 注意把<code>/c:/software/hadoop-3.3.0</code>替换成你的 hadoop 根目录</p></blockquote><ul><li>hadoop-3.3.0/etc/hadoop/yarn-site.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>hadoop-3.3.0/etc/hadoop/hadoop-env.cmd</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set JAVA_HOME=C:\Java</span><br></pre></td></tr></table></figure><blockquote><p>Remember to replace <code>C:\Java</code> with your java root directory 注意把<code>C:\Java</code>替换成你的 java 根目录</p></blockquote><h2 id="Update-bin-folder"><a href="#Update-bin-folder" class="headerlink" title="Update bin folder"></a>Update bin folder</h2><p>Delete file bin on C:\Hadoop-2.8.0\bin, replaced by file bin on file just download.</p><p><a href="https://github.com/cdarlint/winutils/tree/master/hadoop-3.2.1/bin">Download bin from Github</a><br><a href="https://drive.google.com/drive/folders/1QaasfLtMdVuxxXX0a6i4Ko72e8F9ZQNQ?usp=sharing">Download bin from Drive</a></p><h1 id="Run-执行-Hadoop"><a href="#Run-执行-Hadoop" class="headerlink" title="Run 执行 Hadoop"></a>Run 执行 Hadoop</h1><ol><li>Enter <code>hdfs namenode -format</code> in the bin directory, and you should see the result 在 bin 目录下输入<code>hdfs namenode -format</code>，应该能看到这样的结果:</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://i.ibb.co/25wSKpN/Picture-1.png" alt="a"></p><ol start="2"><li>Enter <code>start-all.cmd</code> in the sbin directory, and multiple cmd windows will be created. At this time, enter <code>jps</code> and you should see the following results 在 sbin 目录下输入<code>start-all.cmd</code>，会有多个 cmd 窗口被创建，此时输入<code>jps</code>，应当看到如下结果：</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://i.ibb.co/nDxVxPh/image.jpg" alt="a"></p><blockquote><p>Sometimes encounter the failure of DataNode creation. Delete the data/datanode folder in the root directory to solve the problem in start-all. 有时会遇到 DataNode 创建失败的情况，删除根目录下 data/datanode 文件夹在 start-all 解决问题。</p></blockquote><ol start="3"><li>Make sure 4 cmd are all running.</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://i.ibb.co/CHphT5N/image.jpg" alt="a"></p><ol start="4"><li>Enter <code>localhost:50070</code> in the browser and you should see the following webpage 在浏览器中输入<code>localhost:50070</code>应当能看到如下网页：</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://i.ibb.co/zr3d0vY/image.jpg" alt="a"></p><ol start="4"><li><p>Enter <code>localhost:8088</code> in the browser and you should see the following webpage 在浏览器中输入<code>localhost:50070</code>应当能看到如下网页：</p></li><li><p>Enter <code>stop-all.cmd</code> in the sbin directory.</p></li></ol><h1 id="WordCount-amp-MapReduce"><a href="#WordCount-amp-MapReduce" class="headerlink" title="WordCount &amp; MapReduce"></a>WordCount &amp; MapReduce</h1><p>If you want to play with Hadoop’s MapReduce algorithm and WordCount.java.</p><p><a href="https://hadoop.apache.org/docs/stable/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html">Download from Apache</a></p>]]></content>
    
    <summary type="html">
    
      Install Hadoop on Windows
    
    </summary>
    
    
      <category term="Big Data" scheme="http://blog.likweitan.tech/categories/Big-Data/"/>
    
      <category term="Hadoop" scheme="http://blog.likweitan.tech/categories/Big-Data/Hadoop/"/>
    
    
      <category term="hadoop" scheme="http://blog.likweitan.tech/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>React: Freecodecamp</title>
    <link href="http://blog.likweitan.tech/posts/aef13551/"/>
    <id>http://blog.likweitan.tech/posts/aef13551/</id>
    <published>2020-05-08T02:05:01.000Z</published>
    <updated>2021-05-31T13:13:46.723Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Create-a-Simple-JSX-Element"><a href="#Create-a-Simple-JSX-Element" class="headerlink" title="Create a Simple JSX Element"></a>Create a Simple JSX Element</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> JSX = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello JSX!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><h1 id="Create-a-Complex-JSX-Element"><a href="#Create-a-Complex-JSX-Element" class="headerlink" title="Create a Complex JSX Element"></a>Create a Complex JSX Element</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> JSX = (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Paragraph One<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph Two<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>b<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>c<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="Add-Comments-in-JSX"><a href="#Add-Comments-in-JSX" class="headerlink" title="Add Comments in JSX"></a>Add Comments in JSX</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> JSX = (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;/* This is a block */&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a block of JSX<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s a subtitle<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="Render-HTML-Elements-to-the-DOM"><a href="#Render-HTML-Elements-to-the-DOM" class="headerlink" title="Render HTML Elements to the DOM"></a>Render HTML Elements to the DOM</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> JSX = (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lets render this to the DOM<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line">ReactDOM.render(JSX, <span class="built_in">document</span>.getElementById(<span class="string">&quot;challenge-node&quot;</span>));</span><br></pre></td></tr></table></figure><h1 id="Define-an-HTML-Class-in-JSX"><a href="#Define-an-HTML-Class-in-JSX" class="headerlink" title="Define an HTML Class in JSX"></a>Define an HTML Class in JSX</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> JSX = (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;myDiv&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Add a class to this div<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="Learn-About-Self-Closing-JSX-Tags"><a href="#Learn-About-Self-Closing-JSX-Tags" class="headerlink" title="Learn About Self-Closing JSX Tags"></a>Learn About Self-Closing JSX Tags</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> JSX = (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to React!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Be sure to close all tags!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>For example the line-break tag can be written as <br> or as <br />, but should never be written as <br></br>, since it doesn’t contain any content.</p></blockquote><h1 id="Create-a-Stateless-Functional-Component"><a href="#Create-a-Stateless-Functional-Component" class="headerlink" title="Create a Stateless Functional Component"></a>Create a Stateless Functional Component</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyComponent = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>some strings<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Create-a-React-Component"><a href="#Create-a-React-Component" class="headerlink" title="Create a React Component"></a>Create a React Component</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Create-a-Component-with-Composition"><a href="#Create-a-Component-with-Composition" class="headerlink" title="Create a Component with Composition"></a>Create a Component with Composition</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ChildComponent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am the child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>I am the parent<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ChildComponent</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Use-React-to-Render-Nested-Components"><a href="#Use-React-to-Render-Nested-Components" class="headerlink" title="Use React to Render Nested Components"></a>Use React to Render Nested Components</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TypesOfFruit = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Fruits:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apples<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Blueberries<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Strawberries<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Bananas<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Fruits = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">TypesOfFruit</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TypesOfFood</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Types of Food:<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Fruits</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Compose-React-Components"><a href="#Compose-React-Components" class="headerlink" title="Compose React Components"></a>Compose React Components</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruits</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Fruits:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">NonCitrus</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Citrus</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TypesOfFood</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Types of Food:<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Fruits</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Vegetables</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Render-a-Class-Component-to-the-DOM"><a href="#Render-a-Class-Component-to-the-DOM" class="headerlink" title="Render a Class Component to the DOM"></a>Render a Class Component to the DOM</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TypesOfFood</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Types of Food:<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Fruits</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Vegetables</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">TypesOfFood</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;challenge-node&quot;</span>));</span><br></pre></td></tr></table></figure><h1 id="Write-a-React-Component-from-Scratch"><a href="#Write-a-React-Component-from-Scratch" class="headerlink" title="Write a React Component from Scratch"></a>Write a React Component from Scratch</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My First React Component!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;challenge-node&quot;</span>));</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.freecodecamp.org/forum/t/freecodecamp-challenge-guide-write-a-react-component-from-scratch/301424">https://www.freecodecamp.org/forum/t/freecodecamp-challenge-guide-write-a-react-component-from-scratch/301424</a></p></blockquote><h1 id="Pass-Props-to-a-Stateless-Functional-Component"><a href="#Pass-Props-to-a-Stateless-Functional-Component" class="headerlink" title="Pass Props to a Stateless Functional Component"></a>Pass Props to a Stateless Functional Component</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CurrentDate = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>The current date is: &#123;props.date&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calendar</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>What date is it?<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">CurrentDate</span> <span class="attr">date</span>=<span class="string">&#123;Date()&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Pass-an-Array-as-Props"><a href="#Pass-an-Array-as-Props" class="headerlink" title="Pass an Array as Props"></a>Pass an Array as Props</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> List = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* change code below this line */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.tasks.join(&quot;, &quot;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* change code above this line */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToDo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>To Do Lists<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Today<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">tasks</span>=<span class="string">&#123;[</span>&quot;<span class="attr">walk</span> <span class="attr">dog</span>&quot;, &quot;<span class="attr">workout</span>&quot;, &quot;<span class="attr">workout</span>&quot;]&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Tomorrow<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">tasks</span>=<span class="string">&#123;[</span>&quot;<span class="attr">walk</span> <span class="attr">dog</span>&quot;, &quot;<span class="attr">workout</span>&quot;, &quot;<span class="attr">workout</span>&quot;]&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Use-Default-Props"><a href="#Use-Default-Props" class="headerlink" title="Use Default Props"></a>Use Default Props</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ShoppingCart = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Shopping Cart Component<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line">ShoppingCart.defaultProps = &#123; <span class="attr">items</span>: <span class="number">0</span> &#125;;</span><br></pre></td></tr></table></figure><h1 id="Override-Default-Props"><a href="#Override-Default-Props" class="headerlink" title="Override Default Props"></a>Override Default Props</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Items = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Current Quantity of Items in Cart: &#123;props.quantity&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Items.defaultProps = &#123;</span><br><span class="line">  <span class="attr">quantity</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingCart</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Items</span> <span class="attr">quantity</span>=<span class="string">&#123;10&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Use-PropTypes-to-Define-the-Props-You-Expect"><a href="#Use-PropTypes-to-Define-the-Props-You-Expect" class="headerlink" title="Use PropTypes to Define the Props You Expect"></a>Use PropTypes to Define the Props You Expect</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Items = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Current Quantity of Items in Cart: &#123;props.quantity&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Items.propTypes = &#123; <span class="attr">quantity</span>: PropTypes.number.isRequired &#125;;</span><br><span class="line"></span><br><span class="line">Items.defaultProps = &#123;</span><br><span class="line">  <span class="attr">quantity</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingCart</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Items</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Access-Props-Using-this-props"><a href="#Access-Props-Using-this-props" class="headerlink" title="Access Props Using this.props"></a>Access Props Using this.props</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReturnTempPassword</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          Your temporary password is: <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;this.props.tempPassword&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResetPassword</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Reset Password<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>We&#x27;ve generated a new temporary password for you.<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Please reset this password from your account settings ASAP.<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ReturnTempPassword</span> <span class="attr">tempPassword</span>=<span class="string">&quot;asa22sas&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Review-Using-Props-with-Stateless-Functional-Components"><a href="#Review-Using-Props-with-Stateless-Functional-Components" class="headerlink" title="Review Using Props with Stateless Functional Components"></a>Review Using Props with Stateless Functional Components</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CampSite</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Camper</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Camper = <span class="function">(<span class="params">props</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">Camper.defaultProps = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;CamperBot&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Camper.propTypes = &#123;</span><br><span class="line">  <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="Create-a-Stateful-Component"><a href="#Create-a-Stateful-Component" class="headerlink" title="Create a Stateful Component"></a>Create a Stateful Component</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatefulComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;asas&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Render-State-in-the-User-Interface"><a href="#Render-State-in-the-User-Interface" class="headerlink" title="Render State in the User Interface"></a>Render State in the User Interface</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;freeCodeCamp&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Render-State-in-the-User-Interface-Another-Way"><a href="#Render-State-in-the-User-Interface-Another-Way" class="headerlink" title="Render State in the User Interface Another Way"></a>Render State in the User Interface Another Way</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;freeCodeCamp&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="built_in">this</span>.state.name;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Set-State-with-this-setState"><a href="#Set-State-with-this-setState" class="headerlink" title="Set State with this.setState"></a>Set State with this.setState</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;Initial State&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.handleClick = <span class="built_in">this</span>.handleClick.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;React Rocks!&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Bind-‘this’-to-a-Class-Method"><a href="#Bind-‘this’-to-a-Class-Method" class="headerlink" title="Bind ‘this’ to a Class Method"></a>Bind ‘this’ to a Class Method</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;Hello&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.handleClick = <span class="built_in">this</span>.handleClick.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&quot;You clicked!&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.state.text&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Use-State-to-Toggle-an-Element"><a href="#Use-State-to-Toggle-an-Element" class="headerlink" title="Use State to Toggle an Element"></a>Use State to Toggle an Element</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">visibility</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.toggleVisibility = <span class="built_in">this</span>.toggleVisibility.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">toggleVisibility</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (state.visibility === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">visibility</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">visibility</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state.visibility) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.toggleVisibility&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Now you see me!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.toggleVisibility&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Write-a-Simple-Counter"><a href="#Write-a-Simple-Counter" class="headerlink" title="Write a Simple Counter"></a>Write a Simple Counter</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// change code below this line</span></span><br><span class="line">    <span class="built_in">this</span>.increment = <span class="built_in">this</span>.increment.bind(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.decrement = <span class="built_in">this</span>.decrement.bind(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.reset = <span class="built_in">this</span>.reset.bind(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">// change code above this line</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// change code below this line</span></span><br><span class="line">  <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">count</span>: state.count + <span class="number">1</span>,</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">decrement</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">count</span>: state.count - <span class="number">1</span>,</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">reset</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// change code above this line</span></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;inc&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increment&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          Increment!</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;dec&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.decrement&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          Decrement!</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.reset&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          Reset</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Current Count: &#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Front End Libraries" scheme="http://blog.likweitan.tech/categories/Front-End-Libraries/"/>
    
      <category term="React" scheme="http://blog.likweitan.tech/categories/Front-End-Libraries/React/"/>
    
    
  </entry>
  
  <entry>
    <title>Python: Lists</title>
    <link href="http://blog.likweitan.tech/posts/7117eb09/"/>
    <id>http://blog.likweitan.tech/posts/7117eb09/</id>
    <published>2020-05-07T14:21:38.000Z</published>
    <updated>2021-05-31T13:13:46.723Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h1><p>Lists in Python represent ordered sequences of values.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">primes = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><p>Types of things in list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">planets = [<span class="string">&#x27;Mercury&#x27;</span>, <span class="string">&#x27;Venus&#x27;</span>, <span class="string">&#x27;Earth&#x27;</span>, <span class="string">&#x27;Mars&#x27;</span>, <span class="string">&#x27;Jupiter&#x27;</span>, <span class="string">&#x27;Saturn&#x27;</span>, <span class="string">&#x27;Uranus&#x27;</span>, <span class="string">&#x27;Neptune&#x27;</span>]</span><br></pre></td></tr></table></figure><p>A list of list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hands = [</span><br><span class="line">    [<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;K&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;K&#x27;</span>], <span class="comment"># (Comma after the last element is optional)</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># (I could also have written this on one line, but it can get hard to read)</span></span><br><span class="line">hands = [[<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;K&#x27;</span>], [<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>], [<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;K&#x27;</span>]]</span><br></pre></td></tr></table></figure><p>A list can contains different types of variables</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_favourite_things = [<span class="number">32</span>, <span class="string">&#x27;raindrops on roses&#x27;</span>, <span class="built_in">help</span>]</span><br><span class="line"><span class="comment"># (Yes, Python&#x27;s help function is *definitely* one of my favourite things)</span></span><br></pre></td></tr></table></figure><h1 id="Indexing"><a href="#Indexing" class="headerlink" title="Indexing"></a>Indexing</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">planets[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><blockquote><p>‘Mercury’</p></blockquote><p>Elements at the end of the list can be accessed with negative numbers, starting from -1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">planets[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h1 id="Slicing"><a href="#Slicing" class="headerlink" title="Slicing"></a>Slicing</h1><p>What are the first three planets?<br>前三个行星是什么？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">planets[<span class="number">0</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><blockquote><p>[‘Mercury’, ‘Venus’, ‘Earth’]</p></blockquote><p>The starting and ending indices are both optional. If I leave out the start index, it’s assumed to be 0. So I could rewrite the expression above as:<br>起始索引和结束索引都是可选的。所以我可以把上面的表达式改写成:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">planets[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><blockquote><p>[‘Mercury’, ‘Venus’, ‘Earth’]</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Pandas: Index, Select, Assign</title>
    <link href="http://blog.likweitan.tech/posts/3cc6066f/"/>
    <id>http://blog.likweitan.tech/posts/3cc6066f/</id>
    <published>2020-05-07T09:36:12.000Z</published>
    <updated>2021-05-31T13:13:46.720Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">reviews = pd.read_csv(<span class="string">&quot;input/wine-reviews/winemag-data-130k-v2.csv&quot;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">pd.set_option(<span class="string">&quot;display.max_rows&quot;</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>Look at an overview of your data by running the following line.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reviews.head()</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>description</th>      <th>designation</th>      <th>points</th>      <th>price</th>      <th>province</th>      <th>region_1</th>      <th>region_2</th>      <th>taster_name</th>      <th>taster_twitter_handle</th>      <th>title</th>      <th>variety</th>      <th>winery</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Italy</td>      <td>Aromas include tropical fruit, broom, brimston...</td>      <td>Vulkà Bianco</td>      <td>87</td>      <td>NaN</td>      <td>Sicily &amp; Sardinia</td>      <td>Etna</td>      <td>NaN</td>      <td>Kerin O’Keefe</td>      <td>@kerinokeefe</td>      <td>Nicosia 2013 Vulkà Bianco  (Etna)</td>      <td>White Blend</td>      <td>Nicosia</td>    </tr>    <tr>      <th>1</th>      <td>Portugal</td>      <td>This is ripe and fruity, a wine that is smooth...</td>      <td>Avidagos</td>      <td>87</td>      <td>15.0</td>      <td>Douro</td>      <td>NaN</td>      <td>NaN</td>      <td>Roger Voss</td>      <td>@vossroger</td>      <td>Quinta dos Avidagos 2011 Avidagos Red (Douro)</td>      <td>Portuguese Red</td>      <td>Quinta dos Avidagos</td>    </tr>    <tr>      <th>2</th>      <td>US</td>      <td>Tart and snappy, the flavors of lime flesh and...</td>      <td>NaN</td>      <td>87</td>      <td>14.0</td>      <td>Oregon</td>      <td>Willamette Valley</td>      <td>Willamette Valley</td>      <td>Paul Gregutt</td>      <td>@paulgwine</td>      <td>Rainstorm 2013 Pinot Gris (Willamette Valley)</td>      <td>Pinot Gris</td>      <td>Rainstorm</td>    </tr>    <tr>      <th>3</th>      <td>US</td>      <td>Pineapple rind, lemon pith and orange blossom ...</td>      <td>Reserve Late Harvest</td>      <td>87</td>      <td>13.0</td>      <td>Michigan</td>      <td>Lake Michigan Shore</td>      <td>NaN</td>      <td>Alexander Peartree</td>      <td>NaN</td>      <td>St. Julian 2013 Reserve Late Harvest Riesling ...</td>      <td>Riesling</td>      <td>St. Julian</td>    </tr>    <tr>      <th>4</th>      <td>US</td>      <td>Much like the regular bottling from 2012, this...</td>      <td>Vintner's Reserve Wild Child Block</td>      <td>87</td>      <td>65.0</td>      <td>Oregon</td>      <td>Willamette Valley</td>      <td>Willamette Valley</td>      <td>Paul Gregutt</td>      <td>@paulgwine</td>      <td>Sweet Cheeks 2012 Vintner's Reserve Wild Child...</td>      <td>Pinot Noir</td>      <td>Sweet Cheeks</td>    </tr>  </tbody></table></div><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>Select the <code>description</code> column from <code>reviews</code> and assign the result to the variable <code>desc</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Your code here</span></span><br><span class="line">desc = reviews.description</span><br><span class="line">desc</span><br></pre></td></tr></table></figure><pre><code>0         Aromas include tropical fruit, broom, brimston...1         This is ripe and fruity, a wine that is smooth...                                ...129969    A dry style of Pinot Gris, this is crisp with ...129970    Big, rich and off-dry, this is powered by inte...Name: description, Length: 129971, dtype: object</code></pre><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p>Select the first value from the description column of <code>reviews</code>, assigning it to variable <code>first_description</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first_description = reviews.description.iloc[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check your answer</span></span><br><span class="line">first_description</span><br></pre></td></tr></table></figure><pre><code>&quot;Aromas include tropical fruit, broom, brimstone and dried herb. The palate isn&#39;t overly expressive, offering unripened apple, citrus and dried sage alongside brisk acidity.&quot;</code></pre><p>first_description = reviews.description.iloc[0]<br>Note that while this is the preferred way to obtain the entry in the DataFrame, many other options will return a valid result, such as reviews.description.loc[0], reviews.description[0], and more!</p><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p>Select the first row of data (the first record) from <code>reviews</code>, assigning it to the variable <code>first_row</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first_row = reviews.iloc[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check your answer</span></span><br><span class="line">first_row</span><br></pre></td></tr></table></figure><pre><code>country                                                    Italydescription    Aromas include tropical fruit, broom, brimston...                                     ...variety                                              White Blendwinery                                                   NicosiaName: 0, Length: 13, dtype: object</code></pre><h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2><p>Select the first 10 values from the <code>description</code> column in <code>reviews</code>, assigning the result to variable <code>first_descriptions</code>.</p><p>Hint: format your output as a pandas Series.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first_descriptions = reviews.description.iloc[:<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check your answer</span></span><br><span class="line">first_descriptions</span><br></pre></td></tr></table></figure><pre><code>0    Aromas include tropical fruit, broom, brimston...1    This is ripe and fruity, a wine that is smooth...                           ...8    Savory dried thyme notes accent sunnier flavor...9    This has great depth of flavor with its fresh ...Name: description, Length: 10, dtype: object</code></pre><p>first_descriptions = reviews.description.iloc[:10]<br>Note that many other options will return a valid result, such as desc.head(10) and reviews.loc[:9, “description”].</p><h2 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h2><p>Select the records with index labels <code>1</code>, <code>2</code>, <code>3</code>, <code>5</code>, and <code>8</code>, assigning the result to the variable <code>sample_reviews</code>.</p><p>In other words, generate the following DataFrame:</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.imgur.com/sHZvI1O.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sample_reviews = reviews.iloc[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check your answer</span></span><br><span class="line">sample_reviews</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>description</th>      <th>designation</th>      <th>points</th>      <th>price</th>      <th>province</th>      <th>region_1</th>      <th>region_2</th>      <th>taster_name</th>      <th>taster_twitter_handle</th>      <th>title</th>      <th>variety</th>      <th>winery</th>    </tr>  </thead>  <tbody>    <tr>      <th>1</th>      <td>Portugal</td>      <td>This is ripe and fruity, a wine that is smooth...</td>      <td>Avidagos</td>      <td>87</td>      <td>15.0</td>      <td>Douro</td>      <td>NaN</td>      <td>NaN</td>      <td>Roger Voss</td>      <td>@vossroger</td>      <td>Quinta dos Avidagos 2011 Avidagos Red (Douro)</td>      <td>Portuguese Red</td>      <td>Quinta dos Avidagos</td>    </tr>    <tr>      <th>2</th>      <td>US</td>      <td>Tart and snappy, the flavors of lime flesh and...</td>      <td>NaN</td>      <td>87</td>      <td>14.0</td>      <td>Oregon</td>      <td>Willamette Valley</td>      <td>Willamette Valley</td>      <td>Paul Gregutt</td>      <td>@paulgwine</td>      <td>Rainstorm 2013 Pinot Gris (Willamette Valley)</td>      <td>Pinot Gris</td>      <td>Rainstorm</td>    </tr>    <tr>      <th>3</th>      <td>US</td>      <td>Pineapple rind, lemon pith and orange blossom ...</td>      <td>Reserve Late Harvest</td>      <td>87</td>      <td>13.0</td>      <td>Michigan</td>      <td>Lake Michigan Shore</td>      <td>NaN</td>      <td>Alexander Peartree</td>      <td>NaN</td>      <td>St. Julian 2013 Reserve Late Harvest Riesling ...</td>      <td>Riesling</td>      <td>St. Julian</td>    </tr>    <tr>      <th>5</th>      <td>Spain</td>      <td>Blackberry and raspberry aromas show a typical...</td>      <td>Ars In Vitro</td>      <td>87</td>      <td>15.0</td>      <td>Northern Spain</td>      <td>Navarra</td>      <td>NaN</td>      <td>Michael Schachner</td>      <td>@wineschach</td>      <td>Tandem 2011 Ars In Vitro Tempranillo-Merlot (N...</td>      <td>Tempranillo-Merlot</td>      <td>Tandem</td>    </tr>    <tr>      <th>8</th>      <td>Germany</td>      <td>Savory dried thyme notes accent sunnier flavor...</td>      <td>Shine</td>      <td>87</td>      <td>12.0</td>      <td>Rheinhessen</td>      <td>NaN</td>      <td>NaN</td>      <td>Anna Lee C. Iijima</td>      <td>NaN</td>      <td>Heinz Eifel 2013 Shine Gewürztraminer (Rheinhe...</td>      <td>Gewürztraminer</td>      <td>Heinz Eifel</td>    </tr>  </tbody></table></div><h2 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h2><p>Create a variable <code>df</code> containing the <code>country</code>, <code>province</code>, <code>region_1</code>, and <code>region_2</code> columns of the records with the index labels <code>0</code>, <code>1</code>, <code>10</code>, and <code>100</code>. In other words, generate the following DataFrame:</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.imgur.com/FUCGiKP.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = reviews.loc[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>],[<span class="string">&#x27;country&#x27;</span>,<span class="string">&#x27;province&#x27;</span>,<span class="string">&#x27;region_1&#x27;</span>,<span class="string">&#x27;region_2&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check your answer</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>province</th>      <th>region_1</th>      <th>region_2</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Italy</td>      <td>Sicily &amp; Sardinia</td>      <td>Etna</td>      <td>NaN</td>    </tr>    <tr>      <th>1</th>      <td>Portugal</td>      <td>Douro</td>      <td>NaN</td>      <td>NaN</td>    </tr>    <tr>      <th>10</th>      <td>US</td>      <td>California</td>      <td>Napa Valley</td>      <td>Napa</td>    </tr>    <tr>      <th>100</th>      <td>US</td>      <td>New York</td>      <td>Finger Lakes</td>      <td>Finger Lakes</td>    </tr>  </tbody></table></div><h2 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h2><p>Create a variable <code>df</code> containing the <code>country</code> and <code>variety</code> columns of the first 100 records.</p><p>Hint: you may use <code>loc</code> or <code>iloc</code>. When working on the answer this question and the several of the ones that follow, keep the following “gotcha” described in the tutorial:</p><blockquote><p><code>iloc</code> uses the Python stdlib indexing scheme, where the first element of the range is included and the last one excluded.<br><code>loc</code>, meanwhile, indexes inclusively.</p></blockquote><blockquote><p>This is particularly confusing when the DataFrame index is a simple numerical list, e.g. <code>0,...,1000</code>. In this case <code>df.iloc[0:1000]</code> will return 1000 entries, while <code>df.loc[0:1000]</code> return 1001 of them! To get 1000 elements using <code>loc</code>, you will need to go one lower and ask for <code>df.iloc[0:999]</code>.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cols = [<span class="string">&#x27;country&#x27;</span>, <span class="string">&#x27;variety&#x27;</span>]</span><br><span class="line">df = reviews.loc[:<span class="number">99</span>, cols]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check your answer</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>variety</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Italy</td>      <td>White Blend</td>    </tr>    <tr>      <th>1</th>      <td>Portugal</td>      <td>Portuguese Red</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>98</th>      <td>Italy</td>      <td>Sangiovese</td>    </tr>    <tr>      <th>99</th>      <td>US</td>      <td>Bordeaux-style Red Blend</td>    </tr>  </tbody></table><p>100 rows × 2 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cols_idx = [<span class="number">0</span>, <span class="number">11</span>]</span><br><span class="line">df = reviews.iloc[:<span class="number">100</span>, cols_idx]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check your answer</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>variety</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Italy</td>      <td>White Blend</td>    </tr>    <tr>      <th>1</th>      <td>Portugal</td>      <td>Portuguese Red</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>98</th>      <td>Italy</td>      <td>Sangiovese</td>    </tr>    <tr>      <th>99</th>      <td>US</td>      <td>Bordeaux-style Red Blend</td>    </tr>  </tbody></table><p>100 rows × 2 columns</p></div><h2 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h2><p>Create a DataFrame <code>italian_wines</code> containing reviews of wines made in <code>Italy</code>. Hint: <code>reviews.country</code> equals what?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">italian_wines = reviews.loc[reviews.country==<span class="string">&#x27;Italy&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check your answer</span></span><br><span class="line">italian_wines</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>description</th>      <th>designation</th>      <th>points</th>      <th>price</th>      <th>province</th>      <th>region_1</th>      <th>region_2</th>      <th>taster_name</th>      <th>taster_twitter_handle</th>      <th>title</th>      <th>variety</th>      <th>winery</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Italy</td>      <td>Aromas include tropical fruit, broom, brimston...</td>      <td>Vulkà Bianco</td>      <td>87</td>      <td>NaN</td>      <td>Sicily &amp; Sardinia</td>      <td>Etna</td>      <td>NaN</td>      <td>Kerin O’Keefe</td>      <td>@kerinokeefe</td>      <td>Nicosia 2013 Vulkà Bianco  (Etna)</td>      <td>White Blend</td>      <td>Nicosia</td>    </tr>    <tr>      <th>6</th>      <td>Italy</td>      <td>Here's a bright, informal red that opens with ...</td>      <td>Belsito</td>      <td>87</td>      <td>16.0</td>      <td>Sicily &amp; Sardinia</td>      <td>Vittoria</td>      <td>NaN</td>      <td>Kerin O’Keefe</td>      <td>@kerinokeefe</td>      <td>Terre di Giurfo 2013 Belsito Frappato (Vittoria)</td>      <td>Frappato</td>      <td>Terre di Giurfo</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>129961</th>      <td>Italy</td>      <td>Intense aromas of wild cherry, baking spice, t...</td>      <td>NaN</td>      <td>90</td>      <td>30.0</td>      <td>Sicily &amp; Sardinia</td>      <td>Sicilia</td>      <td>NaN</td>      <td>Kerin O’Keefe</td>      <td>@kerinokeefe</td>      <td>COS 2013 Frappato (Sicilia)</td>      <td>Frappato</td>      <td>COS</td>    </tr>    <tr>      <th>129962</th>      <td>Italy</td>      <td>Blackberry, cassis, grilled herb and toasted a...</td>      <td>Sàgana Tenuta San Giacomo</td>      <td>90</td>      <td>40.0</td>      <td>Sicily &amp; Sardinia</td>      <td>Sicilia</td>      <td>NaN</td>      <td>Kerin O’Keefe</td>      <td>@kerinokeefe</td>      <td>Cusumano 2012 Sàgana Tenuta San Giacomo Nero d...</td>      <td>Nero d'Avola</td>      <td>Cusumano</td>    </tr>  </tbody></table><p>19540 rows × 13 columns</p></div><h2 id="9"><a href="#9" class="headerlink" title="9."></a>9.</h2><p>Create a DataFrame <code>top_oceania_wines</code> containing all reviews with at least 95 points (out of 100) for wines from Australia or New Zealand.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">top_oceania_wines = reviews.loc[(reviews.points &gt;= <span class="number">95</span>) &amp; ((reviews.country == <span class="string">&#x27;Australia&#x27;</span>) | (reviews.country == <span class="string">&#x27;New Zealand&#x27;</span>))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check your answer</span></span><br><span class="line">top_oceania_wines</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>country</th>      <th>description</th>      <th>designation</th>      <th>points</th>      <th>price</th>      <th>province</th>      <th>region_1</th>      <th>region_2</th>      <th>taster_name</th>      <th>taster_twitter_handle</th>      <th>title</th>      <th>variety</th>      <th>winery</th>    </tr>  </thead>  <tbody>    <tr>      <th>345</th>      <td>Australia</td>      <td>This wine contains some material over 100 year...</td>      <td>Rare</td>      <td>100</td>      <td>350.0</td>      <td>Victoria</td>      <td>Rutherglen</td>      <td>NaN</td>      <td>Joe Czerwinski</td>      <td>@JoeCz</td>      <td>Chambers Rosewood Vineyards NV Rare Muscat (Ru...</td>      <td>Muscat</td>      <td>Chambers Rosewood Vineyards</td>    </tr>    <tr>      <th>346</th>      <td>Australia</td>      <td>This deep brown wine smells like a damp, mossy...</td>      <td>Rare</td>      <td>98</td>      <td>350.0</td>      <td>Victoria</td>      <td>Rutherglen</td>      <td>NaN</td>      <td>Joe Czerwinski</td>      <td>@JoeCz</td>      <td>Chambers Rosewood Vineyards NV Rare Muscadelle...</td>      <td>Muscadelle</td>      <td>Chambers Rosewood Vineyards</td>    </tr>    <tr>      <th>...</th>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>      <td>...</td>    </tr>    <tr>      <th>122507</th>      <td>New Zealand</td>      <td>This blend of Cabernet Sauvignon (62.5%), Merl...</td>      <td>SQM Gimblett Gravels Cabernets/Merlot</td>      <td>95</td>      <td>79.0</td>      <td>Hawke's Bay</td>      <td>NaN</td>      <td>NaN</td>      <td>Joe Czerwinski</td>      <td>@JoeCz</td>      <td>Squawking Magpie 2014 SQM Gimblett Gravels Cab...</td>      <td>Bordeaux-style Red Blend</td>      <td>Squawking Magpie</td>    </tr>    <tr>      <th>122939</th>      <td>Australia</td>      <td>Full-bodied and plush yet vibrant and imbued w...</td>      <td>The Factor</td>      <td>98</td>      <td>125.0</td>      <td>South Australia</td>      <td>Barossa Valley</td>      <td>NaN</td>      <td>Joe Czerwinski</td>      <td>@JoeCz</td>      <td>Torbreck 2013 The Factor Shiraz (Barossa Valley)</td>      <td>Shiraz</td>      <td>Torbreck</td>    </tr>  </tbody></table><p>49 rows × 13 columns</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Pandas: Create, Read, Write</title>
    <link href="http://blog.likweitan.tech/posts/4337453/"/>
    <id>http://blog.likweitan.tech/posts/4337453/</id>
    <published>2020-05-07T08:16:29.000Z</published>
    <updated>2021-05-31T13:13:46.720Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><p>To use pandas, you’ll typically start with the following line of code.<br>要使用 pandas，你通常会从下面这行代码开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h1 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h1><p>There are two core objects in pandas: the DataFrame and the Series.<br>在 pandas 中，有两个核心对象：DataFrame 和 Series。</p><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>A DataFrame is a table. It contains an array of individual entries, each of which has a certain value. Each entry corresponds to a row (or record) and a column.<br>一个 DataFrame 是一个表。它包含一个单独的条目数组，每个条目都有一定的值。每个条目对应于一个行（或记录）和一个列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(&#123;<span class="string">&#x27;Yes&#x27;</span>: [<span class="number">50</span>, <span class="number">21</span>], <span class="string">&#x27;No&#x27;</span>: [<span class="number">131</span>, <span class="number">2</span>]&#125;)</span><br></pre></td></tr></table></figure><h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><p>A Series, by contrast, is a sequence of data values. If a DataFrame is a table, a Series is a list. And in fact you can create one with nothing more than a list:<br>相比之下，一个系列是一个数据值的序列。如果说 DataFrame 是一个表，那么 Series 就是一个列表。而事实上，你只需要一个列表就可以创建一个系列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><blockquote><p>0 1<br>1 2<br>2 3<br>3 4<br>4 5<br>dtype: int64</p></blockquote><p>A Series is, in essence, a single column of a DataFrame. So you can assign column values to the Series the same way as before, using an index parameter. However, a Series does not have a column name, it only has one overall name:<br>从本质上说，Series 是 DataFrame 的一个单一列。所以你可以像以前一样，使用索引参数为 Series 分配列值。但是，一个系列没有列名，它只有一个整体名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.Series([<span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>], index=[<span class="string">&#x27;2015 Sales&#x27;</span>, <span class="string">&#x27;2016 Sales&#x27;</span>, <span class="string">&#x27;2017 Sales&#x27;</span>], name=<span class="string">&#x27;Product A&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>2015 Sales 30<br>2016 Sales 35<br>2017 Sales 40<br>Name: Product A, dtype: int64</p></blockquote><h1 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h1><p>Being able to create a DataFrame or Series by hand is handy. But, most of the time, we won’t actually be creating our own data by hand. Instead, we’ll be working with data that already exists.<br>能够手工创建一个 DataFrame 或 Series 是很方便的。但是，大多数情况下，我们实际上不会用手创建我们自己的数据。相反，我们将使用已经存在的数据来工作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wine_reviews = pd.read_csv(<span class="string">&quot;../input/wine-reviews/winemag-data-130k-v2.csv&quot;</span>)</span><br></pre></td></tr></table></figure><p>We can use the shape attribute to check how large the resulting DataFrame is:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wine_reviews.shape</span><br></pre></td></tr></table></figure><blockquote><p>(129971, 14)</p></blockquote><p>So our new DataFrame has 130,000 records split across 14 different columns. That’s almost 2 million entries!</p><p>We can examine the contents of the resultant DataFrame using the head() command, which grabs the first five rows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wine_reviews.head()</span><br></pre></td></tr></table></figure><p>The pd.read_csv() function is well-endowed, with over 30 optional parameters you can specify. For example, you can see in this dataset that the CSV file has a built-in index, which pandas did not pick up on automatically. To make pandas use that column for the index (instead of creating a new one from scratch), we can specify an index_col.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wine_reviews = pd.read_csv(<span class="string">&quot;../input/wine-reviews/winemag-data-130k-v2.csv&quot;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">wine_reviews.head()</span><br></pre></td></tr></table></figure><h1 id="Write"><a href="#Write" class="headerlink" title="Write"></a>Write</h1><p>Run the cell below to create and display a DataFrame called <code>students</code>.<br>运行下面的单元格，创建并显示一个名为<code>students</code>的 DataFrame。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">students = pd.DataFrame(&#123;<span class="string">&#x27;Boys&#x27;</span>: [<span class="number">126</span>, <span class="number">177</span>], <span class="string">&#x27;Girls&#x27;</span>: [<span class="number">94</span>, <span class="number">85</span>]&#125;, index=[<span class="string">&#x27;Year 12&#x27;</span>, <span class="string">&#x27;Year 13&#x27;</span>])</span><br><span class="line">students</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>Boys</th><th>Girls</th></tr></thead><tbody><tr><td>Year 12</td><td>126</td><td>94</td></tr><tr><td>Year 13</td><td>177</td><td>85</td></tr></tbody></table><p>In the cell below, write code to save this DataFrame to disk as a csv file with the name <code>boys_and_girls.csv</code>.<br>在下面的单元格中，编写代码，将此数据框保存为 csv 文件，名称为<code>boys_and_girls.csv</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students.to_csv(<span class="string">&#x27;boys_and_girls.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="https://www.kaggle.com/residentmario/creating-reading-and-writing">Creating, Reading and Writing | Kaggle</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python: Booleans and Conditionals</title>
    <link href="http://blog.likweitan.tech/posts/48128415/"/>
    <id>http://blog.likweitan.tech/posts/48128415/</id>
    <published>2020-05-07T07:25:51.000Z</published>
    <updated>2021-05-31T13:13:46.722Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Booleans"><a href="#Booleans" class="headerlink" title="Booleans"></a>Booleans</h1><p>Python has a type bool which can take on one of two values: True and False.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))</span><br></pre></td></tr></table></figure><blockquote><p>True<br>&lt;class ‘bool’&gt;</p></blockquote><h2 id="Comparison-Operations"><a href="#Comparison-Operations" class="headerlink" title="Comparison Operations"></a>Comparison Operations</h2><p>Operation Description Operation Description<br>a == b a equal to b a != b a not equal to b<br>a &lt; b a less than b a &gt; b a greater than b<br>a &lt;= b a less than or equal to b a &gt;= b a greater than or equal to b</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">can_run_for_president</span>(<span class="params">age</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Can someone of the given age run for president in the US?&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># The US Constitution says you must &quot;have attained to the Age of thirty-five Years&quot;</span></span><br><span class="line">    <span class="keyword">return</span> age &gt;= <span class="number">35</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Can a 19-year-old run for president?&quot;</span>, can_run_for_president(<span class="number">19</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Can a 45-year-old run for president?&quot;</span>, can_run_for_president(<span class="number">45</span>))</span><br></pre></td></tr></table></figure><blockquote><p>Can a 19-year-old run for president? False<br>Can a 45-year-old run for president? True</p></blockquote><h1 id="Conditionals"><a href="#Conditionals" class="headerlink" title="Conditionals"></a>Conditionals</h1><p>While useful enough in their own right, booleans really start to shine when combined with conditional statements, using the keywords if, elif, and else.</p><p>Conditional statements, often referred to as if-then statements, allow the programmer to execute certain pieces of code depending on some Boolean condition. A basic example of a Python conditional statement is this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inspect</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(x, <span class="string">&quot;is zero&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(x, <span class="string">&quot;is positive&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(x, <span class="string">&quot;is negative&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(x, <span class="string">&quot;is unlike anything I&#x27;ve ever seen...&quot;</span>)</span><br><span class="line"></span><br><span class="line">inspect(<span class="number">0</span>)</span><br><span class="line">inspect(-<span class="number">15</span>)</span><br></pre></td></tr></table></figure><blockquote><p>0 is zero<br>-15 is negative</p></blockquote><p>Python adopts the if and else often used in other languages; its more unique keyword is elif, a contraction of “else if”. In these conditional clauses, elif and else blocks are optional; additionally, you can include as many elif statements as you would like.</p><p>Note especially the use of colons (:) and whitespace to denote separate blocks of code. This is similar to what happens when we define a function - the function header ends with :, and the following line is indented with 4 spaces. All subsequent indented lines belong to the body of the function, until we encounter an unindented line, ending the function definition.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Only printed when x is positive; x =&quot;</span>, x)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Also only printed when x is positive; x =&quot;</span>, x)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Always printed, regardless of x&#x27;s value; x =&quot;</span>, x)</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>)</span><br><span class="line">f(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Only printed when x is positive; x = 1<br>Also only printed when x is positive; x = 1<br>Always printed, regardless of x’s value; x = 1<br>Always printed, regardless of x’s value; x = 0</p></blockquote><h2 id="Boolean-conversion"><a href="#Boolean-conversion" class="headerlink" title="Boolean conversion"></a>Boolean conversion</h2><p>We’ve seen <code>int()</code>, which turns things into ints, and float(), which turns things into floats, so you might not be surprised to hear that Python has a bool() function which turns things into bools.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">1</span>)) <span class="comment"># all numbers are treated as true, except 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&quot;asf&quot;</span>)) <span class="comment"># all strings are treated as true, except the empty string &quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line"><span class="comment"># Generally empty sequences (strings, lists, and other types we&#x27;ve yet to see like lists and tuples)</span></span><br><span class="line"><span class="comment"># are &quot;falsey&quot; and the rest are &quot;truthy&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>True<br>False<br>True<br>False</p></blockquote><p>We can use non-boolean objects in if conditions and other places where a boolean would be expected. Python will implicitly treat them as their corresponding boolean value:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&quot;spam&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;spam&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>spam</p></blockquote><h2 id="Conditional-expressions-aka-‘ternary’"><a href="#Conditional-expressions-aka-‘ternary’" class="headerlink" title="Conditional expressions (aka ‘ternary’)"></a>Conditional expressions (aka ‘ternary’)</h2><p>Setting a variable to either of two values depending on some condition is a pretty common pattern.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quiz_message</span>(<span class="params">grade</span>):</span></span><br><span class="line">    <span class="keyword">if</span> grade &lt; <span class="number">50</span>:</span><br><span class="line">        outcome = <span class="string">&#x27;failed&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        outcome = <span class="string">&#x27;passed&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;You&#x27;</span>, outcome, <span class="string">&#x27;the quiz with a grade of&#x27;</span>, grade)</span><br><span class="line"></span><br><span class="line">quiz_message(<span class="number">80</span>)</span><br></pre></td></tr></table></figure><blockquote><p>You passed the quiz with a grade of 80</p></blockquote><p>Python has a handy single-line ‘conditional expression’ syntax to simplify these cases:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quiz_message</span>(<span class="params">grade</span>):</span></span><br><span class="line">    outcome = <span class="string">&#x27;failed&#x27;</span> <span class="keyword">if</span> grade &lt; <span class="number">50</span> <span class="keyword">else</span> <span class="string">&#x27;passed&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;You&#x27;</span>, outcome, <span class="string">&#x27;the quiz with a grade of&#x27;</span>, grade)</span><br><span class="line"></span><br><span class="line">quiz_message(<span class="number">45</span>)</span><br></pre></td></tr></table></figure><blockquote><p>You failed the quiz with a grade of 45</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python: Functions 功能</title>
    <link href="http://blog.likweitan.tech/posts/c6d61a2c/"/>
    <id>http://blog.likweitan.tech/posts/c6d61a2c/</id>
    <published>2020-05-07T03:22:15.000Z</published>
    <updated>2021-05-31T13:13:46.722Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Getting-Help-寻求帮助"><a href="#Getting-Help-寻求帮助" class="headerlink" title="Getting Help 寻求帮助"></a>Getting Help 寻求帮助</h1><p>You saw the abs function in the previous tutorial, but what if you’ve forgotten what it does?<br>你在前面的教程中看到了 abs 函数，但如果你忘记了它的作用怎么办？</p><p>The help() function is possibly the most important Python function you can learn. If you can remember how to use help(), you hold the key to understanding most other function.<br>help()函数可能是你可以学习的最重要的 Python 函数。如果你能记住如何使用 help()，你就掌握了理解大多数其他函数的关键。</p><p>Here is an example:<br>下面是一个例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span>(<span class="built_in">round</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Help on built-in function round in module builtins:</span><br><span class="line"></span><br><span class="line">round(...)</span><br><span class="line">    round(number[, ndigits]) -&gt; number</span><br><span class="line"></span><br><span class="line">    Round a number to a given precision in decimal digits (default 0 digits).</span><br><span class="line">    This returns an int when called with one argument, otherwise the</span><br><span class="line">    same type as the number. ndigits may be negative.</span><br></pre></td></tr></table></figure><p><code>help()</code> displays two things:</p><ol><li>the header of that function <code>round(number[, ndigits])</code>. In this case, this tells us that <code>round()</code> takes an argument we can describe as <code>number</code>. Additionally, we can optionally give a separate argument which could be described as <code>ndigits</code>.<br>函数 round(number[, ndigits])的头。在这种情况下，这告诉我们 round()取一个参数，我们可以用 number 来描述。此外，我们可以选择给出一个单独的参数，可以描述为 ndigits。</li><li>A brief English description of what the function does.<br>简单的英文描述一下这个函数的作用。</li></ol><h1 id="Defining-Functions"><a href="#Defining-Functions" class="headerlink" title="Defining Functions"></a>Defining Functions</h1><p>Builtin functions are great, but we can only get so far with them before we need to start defining our own functions. Below is a simple example.<br>内置函数是很好的，但在我们需要开始定义自己的函数之前，我们只能在这些函数上走得很远。下面是一个简单的例子.Builtin 函数很好，但在我们需要开始定义自己的函数之前，我们只能通过它们走得很远。下面是一个简单的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">least_difference</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line">    diff1 = <span class="built_in">abs</span>(a - b)</span><br><span class="line">    diff2 = <span class="built_in">abs</span>(b - c)</span><br><span class="line">    diff3 = <span class="built_in">abs</span>(a - c)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(diff1, diff2, diff3)</span><br></pre></td></tr></table></figure><h2 id="Docstring"><a href="#Docstring" class="headerlink" title="Docstring"></a>Docstring</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">least_difference</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the smallest difference between any two numbers</span></span><br><span class="line"><span class="string">    among a, b and c.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; least_difference(1, 5, -5)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    diff1 = <span class="built_in">abs</span>(a - b)</span><br><span class="line">    diff2 = <span class="built_in">abs</span>(b - c)</span><br><span class="line">    diff3 = <span class="built_in">abs</span>(a - c)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(diff1, diff2, diff3)</span><br></pre></td></tr></table></figure><p>The docstring is a triple-quoted string (which may span multiple lines) that comes immediately after the header of a function. When we call help() on a function, it shows the docstring.<br>docstring 是一个三引号的字符串（可以跨越多行），紧接在函数的头后面。当我们在一个函数上调用 help() 时，它会显示 docstring。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span>(least_difference)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Help on function least_difference in module __main__:</span><br><span class="line"></span><br><span class="line">least_difference(a, b, c)</span><br><span class="line">    Return the smallest difference between any two numbers</span><br><span class="line">    among a, b and c.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; least_difference(1, 5, -5)</span><br><span class="line">    4</span><br></pre></td></tr></table></figure><h2 id="Functions-that-don’t-return-不返回的函数"><a href="#Functions-that-don’t-return-不返回的函数" class="headerlink" title="Functions that don’t return 不返回的函数"></a>Functions that don’t return 不返回的函数</h2><p>What would happen if we didn’t include the return keyword in our function?<br>如果我们的函数中不包含返回关键字，会有什么后果呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">least_difference</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the smallest difference between any two numbers</span></span><br><span class="line"><span class="string">    among a, b and c.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    diff1 = <span class="built_in">abs</span>(a - b)</span><br><span class="line">    diff2 = <span class="built_in">abs</span>(b - c)</span><br><span class="line">    diff3 = <span class="built_in">abs</span>(a - c)</span><br><span class="line">    <span class="built_in">min</span>(diff1, diff2, diff3)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    least_difference(<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>),</span><br><span class="line">    least_difference(<span class="number">1</span>, <span class="number">10</span>, <span class="number">10</span>),</span><br><span class="line">    least_difference(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>None None None</p></blockquote><p>Python allows us to define such functions. The result of calling them is the special value <code>None</code>. (This is similar to the concept of “null” in other languages.)<br>Python 允许我们定义这样的函数。调用它们的结果是特殊值 <code>None</code>。(这类似于其他语言中的 “null “的概念)。</p><h1 id="Functions-Applied-to-Functions"><a href="#Functions-Applied-to-Functions" class="headerlink" title="Functions Applied to Functions"></a>Functions Applied to Functions</h1><p>Here’s something that’s powerful, though it can feel very abstract at first. You can supply functions as arguments to other functions. Some example may make this clearer:<br>这里有一个很强大的东西，虽然一开始会觉得很抽象。你可以将函数作为参数提供给其他函数。一些例子可能会让你更清楚。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mult_by_five</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span> * x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">fn, arg</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Call fn on arg&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> fn(arg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squared_call</span>(<span class="params">fn, arg</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Call fn on the result of calling fn on arg&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> fn(fn(arg))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    call(mult_by_five, <span class="number">1</span>),</span><br><span class="line">    squared_call(mult_by_five, <span class="number">1</span>),</span><br><span class="line">    sep=<span class="string">&#x27;\n&#x27;</span>, <span class="comment"># &#x27;\n&#x27; is the newline character - it starts a new line</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>5<br>25</p></blockquote><h1 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h1><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>Complete the body of the following function according to its docstring.</p><p>HINT: Python has a built-in function <code>round</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">round_to_two_places</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the given number rounded to two decimal places.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; round_to_two_places(3.14159)</span></span><br><span class="line"><span class="string">    3.14</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Replace this body with your own code.</span></span><br><span class="line">    <span class="comment"># (&quot;pass&quot; is a keyword that does literally nothing. We used it as a placeholder</span></span><br><span class="line">    <span class="comment"># because after we begin a code block, Python requires at least one line of code)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check your answer</span></span><br><span class="line">q1.check()</span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p>The help for <code>round</code> says that <code>ndigits</code> (the second argument) may be negative.<br>What do you think will happen when it is? Try some examples in the following cell?</p><p>Can you think of a case where this would be useful?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Put your test code here</span></span><br></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p>In a previous programming problem, the candy-sharing friends Alice, Bob and Carol tried to split candies evenly. For the sake of their friendship, any candies left over would be smashed. For example, if they collectively bring home 91 candies, they’ll take 30 each and smash 1.</p><p>Below is a simple function that will calculate the number of candies to smash for <em>any</em> number of total candies.</p><p>Modify it so that it optionally takes a second argument representing the number of friends the candies are being split between. If no second argument is provided, it should assume 3 friends, as before.</p><p>Update the docstring to reflect this new behaviour.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_smash</span>(<span class="params">total_candies</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of leftover candies that must be smashed after distributing</span></span><br><span class="line"><span class="string">    the given number of candies evenly between 3 friends.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; to_smash(91)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> total_candies % <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check your answer</span></span><br><span class="line">q3.check()</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.kaggle.com/colinmorris/functions-and-getting-help">Functions and Getting Help | Kaggle</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="programming" scheme="http://blog.likweitan.tech/categories/programming/"/>
    
      <category term="python" scheme="http://blog.likweitan.tech/categories/programming/python/"/>
    
    
      <category term="python" scheme="http://blog.likweitan.tech/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>源代码储存</title>
    <link href="http://blog.likweitan.tech/posts/b5b6b64e/"/>
    <id>http://blog.likweitan.tech/posts/b5b6b64e/</id>
    <published>2020-05-06T14:52:39.000Z</published>
    <updated>2021-05-31T13:13:46.719Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h1><p>Here we can use git’s branching system to work with multiple terminals, so that each time we open a different computer, it’s just a simple configuration and synchronization of files on github, and you can work seamlessly.</p><p>The mechanism is this, since the hexo d uploads deployed to github are actually hexo compiled files that are used to generate web pages and do not contain source files.<br>That is, the upload is automatically generated in .deploy_git in the local directory.</p><p>Other files, including the ones we wrote in the source, and configuration files, subject files, are not uploaded to github</p><p>So you can just take advantage of git’s branch management and upload the source file to another branch of github.</p><p>First, start with a new hexo branch on github.<br>Then, in any local directory, open git bash.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:username/username.github.io.git</span><br></pre></td></tr></table></figure><p>Clone it locally, because the default branch is already set to hexo, so only clone hexo when clone.</p><p>Next, in the clone to the local username.github.io, remove all files except the .git folder</p><p>Copy all the source files of our previous blog, except .deploy_git. it should be said here that the copied source files should have a .gitignore, which is used to ignore some unwanted files, if not, create one yourself, write the following in it, indicating that these types of files do not need git.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><p>Note that if you have cloned the theme file in theme before, then you should delete the .git folder in the theme file, because git cannot nest upload.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m <span class="string">&quot;sth&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python: Hello 你好</title>
    <link href="http://blog.likweitan.tech/posts/ccc442ff/"/>
    <id>http://blog.likweitan.tech/posts/ccc442ff/</id>
    <published>2020-05-06T14:12:31.000Z</published>
    <updated>2021-05-31T13:13:46.722Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>We’ll start with a brief overview of Python syntax, variable assignment, and arithmetic operators. If you have previous Python experience, you can skip straight to the hands-on exercise.</p><h1 id="Hello-Python"><a href="#Hello-Python" class="headerlink" title="Hello, Python!"></a>Hello, Python!</h1><p>Python was named for the British comedy troupe Monty Python, so we’ll make our first Python program an homage to their skit about Spam?</p><p>Just for fun, try reading over the code below and predicting what it’s going to do when run. (If you have no idea, that’s fine!)</p><p>Then click the “output” button to see the results of our program.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">spam_amount = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(spam_amount)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ordering Spam, egg, Spam, Spam, bacon and Spam (4 more servings of Spam)</span></span><br><span class="line">spam_amount = spam_amount + <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> spam_amount &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;But I don&#x27;t want ANY spam!&quot;</span>)</span><br><span class="line"></span><br><span class="line">viking_song = <span class="string">&quot;Spam &quot;</span> * spam_amount</span><br><span class="line"><span class="built_in">print</span>(viking_song)</span><br></pre></td></tr></table></figure><blockquote><p>0<br>But I don’t want ANY spam!<br>Spam Spam Spam Spam</p></blockquote><h2 id="Variable-Assignment"><a href="#Variable-Assignment" class="headerlink" title="Variable Assignment"></a>Variable Assignment</h2><p>Here we create a variable called <code>spam_amount</code> and assign it the value of 0 using =, which is called the assignment operator.</p><blockquote><p>Aside: If you’ve programmed in certain other languages (like Java or C++), you might be noticing some things Python doesn’t require us to do here:</p><ul><li>we don’t need to “declare” spam_amount before assigning to it</li><li>we don’t need to tell Python what type of value spam_amount is going to refer to. In fact, we can even go on to reassign spam_amount to refer to a different sort of thing like a string or a boolean.</li></ul></blockquote><h2 id="Function-Calls"><a href="#Function-Calls" class="headerlink" title="Function Calls"></a>Function Calls</h2><p><code>print</code> is a Python function that displays the value passed to it on the screen. We call functions by putting parentheses after their name, and putting the inputs (or arguments) to the function in those parentheses.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ordering Spam, egg, Spam, Spam, bacon and Spam (4 more servings of Spam)</span></span><br><span class="line">spam_amount = spam_amount + <span class="number">4</span></span><br></pre></td></tr></table></figure><p>The first line above is a <em>comment</em>. In Python, comments begin with the <code>#</code> symbol.</p><p>Next we see an example of reassignment. Reassigning the value of an existing variable looks just the same as creating a variable - it still uses the <code>=</code> assignment operator.</p><p>In this case, the value we’re assigning to <code>spam_amount</code> involves some simple arithmetic on its previous value. When it encounters this line, Python evaluates the expression on the right-hand-side of the <code>=</code> (0 + 4 = 4), and then assigns that value to the variable on the left-hand-side.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> spam_amount &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;But I don&#x27;t want ANY spam!&quot;</span>)</span><br><span class="line"></span><br><span class="line">viking_song = <span class="string">&quot;Spam Spam Spam&quot;</span></span><br><span class="line"><span class="built_in">print</span>(viking_song)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">But I don&#x27;t want ANY spam!</span><br><span class="line">Spam Spam Spam</span><br></pre></td></tr></table></figure><h2 id="Numbers-and-arithmetic-in-Python"><a href="#Numbers-and-arithmetic-in-Python" class="headerlink" title="Numbers and arithmetic in Python"></a>Numbers and arithmetic in Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spam_amount = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>“Number” is a fine informal name for the kind of thing, but if we wanted to be more technical, we could ask Python how it would describe the type of thing that <code>spam_amount</code> is:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>(spam_amount)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int</span><br></pre></td></tr></table></figure><p>It’s an <code>int</code> - short for integer. There’s another sort of number we commonly encounter in Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="number">19.95</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float</span><br></pre></td></tr></table></figure><p>A <code>float</code> is a number with a decimal place - very useful for representing things like weights or proportions.</p><p>type() is the second built-in function we’ve seen (after <code>print()</code>), and it’s another good one to remember. It’s very useful to be able to ask Python “what kind of thing is this?”.</p><table><thead><tr><th>Operator</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>a + b</code></td><td>Addition</td><td>Sum of <code>a</code> and <code>b</code></td></tr><tr><td><code>a - b</code></td><td>Subtraction</td><td>Difference of <code>a</code> and <code>b</code></td></tr><tr><td><code>a * b</code></td><td>Multiplication</td><td>Product of <code>a</code> and <code>b</code></td></tr><tr><td><code>a / b</code></td><td>True division</td><td>Quotient of <code>a</code> and <code>b</code></td></tr><tr><td><code>a // b</code></td><td>Floor division</td><td>Quotient of <code>a</code> and <code>b</code>, removing fractional parts</td></tr><tr><td><code>a % b</code></td><td>Modulus</td><td>Integer remainder after division of <code>a</code> by <code>b</code></td></tr><tr><td><code>a ** b</code></td><td>Exponentiation</td><td><code>a</code> raised to the power of <code>b</code></td></tr><tr><td><code>-a</code></td><td>Negation</td><td>The negative of <code>a</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">5</span> // <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">6</span> // <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h1 id="Order-of-operations"><a href="#Order-of-operations" class="headerlink" title="Order of operations"></a>Order of operations</h1><p>The arithmetic we learned in primary school has conventions about the order in which operations are evaluated. Some remember these by a mnemonic such as <strong>PEMDAS</strong> - <strong>P</strong>arentheses, <strong>E</strong>xponents, <strong>M</strong>ultiplication/<strong>D</strong>ivision, <strong>A</strong>ddition/<strong>S</strong>ubtraction.</p><p>Python follows similar rules about which calculations to perform first. They’re mostly pretty intuitive.</p><h1 id="Built-in-functions-for-working-with-numbers"><a href="#Built-in-functions-for-working-with-numbers" class="headerlink" title="Built-in functions for working with numbers"></a>Built-in functions for working with numbers</h1><h2 id="Min-amp-Max"><a href="#Min-amp-Max" class="headerlink" title="Min &amp; Max"></a>Min &amp; Max</h2><p><code>min</code> and <code>max</code> return the minimum and maximum of their arguments, respectively…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="ABS"><a href="#ABS" class="headerlink" title="ABS"></a>ABS</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(<span class="number">32</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(-<span class="number">32</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">32</span><br><span class="line">32</span><br></pre></td></tr></table></figure><h1 id="Exercise-Syntax-Variables-Numbers"><a href="#Exercise-Syntax-Variables-Numbers" class="headerlink" title="Exercise: Syntax, Variables, Numbers"></a>Exercise: Syntax, Variables, Numbers</h1><h2 id="0"><a href="#0" class="headerlink" title="0."></a>0.</h2><p><em>This is a silly question intended as an introduction to the format we use for hands-on exercises throughout all Kaggle courses.</em></p><p><strong>What is your favorite color?</strong></p><p>To complete this question, create a variable called <code>color</code> in the cell below with an appropriate value. The function call <code>q0.check()</code> (which we’ve already provided in the cell below) will check your answer.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create a variable called color with an appropriate value on the line below</span></span><br><span class="line"><span class="comment"># (Remember, strings in Python must be enclosed in &#x27;single&#x27; or &quot;double&quot; quotes)</span></span><br><span class="line">____</span><br><span class="line">color = <span class="string">&quot;black&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check your answer</span></span><br><span class="line">q0.check()</span><br></pre></td></tr></table></figure><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>Complete the code below. In case it’s helpful, here is the table of available arithmetic operations:</p><table><thead><tr><th>Operator</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>a + b</code></td><td>Addition</td><td>Sum of <code>a</code> and <code>b</code></td></tr><tr><td><code>a - b</code></td><td>Subtraction</td><td>Difference of <code>a</code> and <code>b</code></td></tr><tr><td><code>a * b</code></td><td>Multiplication</td><td>Product of <code>a</code> and <code>b</code></td></tr><tr><td><code>a / b</code></td><td>True division</td><td>Quotient of <code>a</code> and <code>b</code></td></tr><tr><td><code>a // b</code></td><td>Floor division</td><td>Quotient of <code>a</code> and <code>b</code>, removing fractional parts</td></tr><tr><td><code>a % b</code></td><td>Modulus</td><td>Integer remainder after division of <code>a</code> by <code>b</code></td></tr><tr><td><code>a ** b</code></td><td>Exponentiation</td><td><code>a</code> raised to the power of <code>b</code></td></tr><tr><td><code>-a</code></td><td>Negation</td><td>The negative of <code>a</code></td></tr></tbody></table><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p>a) Add parentheses to the following expression so that it evaluates to 1.</p><p><small>Questions, like this one, marked a spicy pepper are a bit harder.</small></p><p>b) <span title="A bit spicy" style="color: darkgreen ">🌶️</span> Add parentheses to the following expression so that it evaluates to 0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">8</span> - <span class="number">3</span>) * (<span class="number">2</span> - (<span class="number">1</span> + <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2><p>Alice, Bob and Carol have agreed to pool their Halloween candy and split it evenly among themselves.<br>For the sake of their friendship, any candies left over will be smashed. For example, if they collectively<br>bring home 91 candies, they’ll take 30 each and smash 1.</p><p>Write an arithmetic expression below to calculate how many candies they must smash for a given haul.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Variables representing the number of candies collected by alice, bob, and carol</span></span><br><span class="line">alice_candies = <span class="number">121</span></span><br><span class="line">bob_candies = <span class="number">77</span></span><br><span class="line">carol_candies = <span class="number">109</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your code goes here! Replace the right-hand side of this assignment with an expression</span></span><br><span class="line"><span class="comment"># involving alice_candies, bob_candies, and carol_candies</span></span><br><span class="line">to_smash = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check your answer</span></span><br><span class="line">q4.check()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Variables representing the number of candies collected by alice, bob, and carol</span></span><br><span class="line">alice_candies = <span class="number">121</span></span><br><span class="line">bob_candies = <span class="number">77</span></span><br><span class="line">carol_candies = <span class="number">109</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your code goes here! Replace the right-hand side of this assignment with an expression</span></span><br><span class="line"><span class="comment"># involving alice_candies, bob_candies, and carol_candies</span></span><br><span class="line">total_candies = alice_candies + bob_candies + carol_candies</span><br><span class="line">to_smash = total_candies % <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check your answer</span></span><br><span class="line">q4.check()</span><br></pre></td></tr></table></figure><h1 id="Keep-Going"><a href="#Keep-Going" class="headerlink" title="Keep Going"></a>Keep Going</h1><p>Next up, you’ll <strong><a href="https://www.kaggle.com/colinmorris/functions-and-getting-help">learn to write new functions and understand functions others write</a></strong>. This will make you at least 10 times more productive as a Python programmer.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Programming" scheme="http://blog.likweitan.tech/categories/Programming/"/>
    
      <category term="Python" scheme="http://blog.likweitan.tech/categories/Programming/Python/"/>
    
    
      <category term="python" scheme="http://blog.likweitan.tech/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>React: The Basics</title>
    <link href="http://blog.likweitan.tech/posts/420a3e53/"/>
    <id>http://blog.likweitan.tech/posts/420a3e53/</id>
    <published>2020-04-24T15:50:52.000Z</published>
    <updated>2021-05-31T13:13:46.724Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="Basic-of-JavaScript"><a href="#Basic-of-JavaScript" class="headerlink" title="Basic of JavaScript"></a>Basic of JavaScript</h2><ul><li>Variables and types</li><li>Objects and arrays</li><li>Functions and classes</li><li>Loops and conditionals</li></ul><h2 id="Learning-JS"><a href="#Learning-JS" class="headerlink" title="Learning JS"></a>Learning JS</h2><ul><li><a href="https://jscomplete.com/beginning-js">Book</a></li><li><a href="https://jscomplete.com/js-labs">Labs</a></li></ul><h1 id="Why-React"><a href="#Why-React" class="headerlink" title="Why React?"></a>Why React?</h1><p>We just tell React what we want, and it will build the actual interfaces on our behalf in the web browser. Without React or similar libraries, we would need to manually build user interface with native web APIs in JavaScript, and that is not easy. When you heard the statement that React is declarative, this is exactly what it means. We describe user interfaces with React and tell it what we want, not how to do it. Reacy will take care of how and translate our declarative descriptions, which we write in the React language to actual user interfaces in the browser.</p><blockquote><p>How Exactly is NOT being a framework a good thing?</p></blockquote><h2 id="Frameworks"><a href="#Frameworks" class="headerlink" title="Frameworks"></a>Frameworks</h2><p><strong>Limited flexibility</strong></p><ul><li>Do things a certain way</li><li>Hard to deviate</li></ul><p><strong>Large and full of features</strong></p><ul><li>Hard to customize</li><li>Use the whole thing</li></ul><blockquote><p>A “language” to model the state of UIs, not the transactions on them.</p></blockquote><h1 id="React’s-Basic-Concepts"><a href="#React’s-Basic-Concepts" class="headerlink" title="React’s Basic Concepts"></a>React’s Basic Concepts</h1><p>React has three simple and fundamental concepts that need to be understand. The first concept is its components. With React we describe user interfaces using components. Components are just functions. In fact, simple React components are actually just vanilla JavaScript functions.</p><ol><li><p>Components</p><ul><li>Like functions</li><li>Input: props, state | Output: UI</li><li>Reusable and composable</li><li><code>&lt;Component /&gt;</code></li><li>Can manage a private state</li></ul></li><li><p>Reactive updates</p><ul><li>React will react</li><li>Take updates to the browser</li></ul></li><li><p>Virtual Views in memory</p><ul><li>Generate HTML using JavaScript</li><li>No HTML template language</li><li>Tree reconciliation</li></ul></li></ol><p>React uses the virtual DOM to compare versions of the UI in memory before it acts on them.</p><h2 id="React-Components"><a href="#React-Components" class="headerlink" title="React Components"></a>React Components</h2><table><thead><tr><th>Function Component</th><th>Class Component</th></tr></thead></table><p>A react component can be one of the two types. It can be either a function component or class component. Both types can be stateful and have side effects, or they can be purely presentational. Class Component is rather powerful.</p><h2 id="JSX-is-NOT-HTML"><a href="#JSX-is-NOT-HTML" class="headerlink" title="JSX is NOT HTML"></a>JSX is NOT HTML</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Getting Started<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>, mountNode);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            React.createElement(<span class="string">&quot;div&quot;</span>, &#123; <span class="attr">className</span>: <span class="string">&quot;container&quot;</span>&#125;,</span><br><span class="line">            React.createElement(<span class="string">&quot;h1&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;Getting Started&quot;</span>)</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(React.createElement(Hello, <span class="literal">null</span>), mountNode);</span><br></pre></td></tr></table></figure><h1 id="Your-First-React-Component"><a href="#Your-First-React-Component" class="headerlink" title="Your First React Component"></a>Your First React Component</h1><p><a href="https://jscomplete.com/playground/rgs1.1">Playground for JavaScript</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;mountNode&quot;</span>));</span><br></pre></td></tr></table></figure><blockquote><p>Hello React!</p></blockquote><p>Simple React function component named Hello. It returns a div. This component has no input. It’s also a peer component, no state here. To display a React component in a browser, we need to instruct the ReactDOM library on how to do that. The function designed to do that is React.DOM.render, which takes in two arguments. The first is the component to render</p><p>The browser is not really executing this. Instead, it’s executing the following and this takes many arguments. The first argument is the element to be created, <em>div</em>. The second argument is any attributes this element will have, the div element has no attributes. The third argument is the child of that div element, <em>Hello React!</em></p><blockquote><p>React.createElement</p></blockquote><p>A component name has to start with an uppercase letter, because if you don’t do that, React will think you meant a HTML element.</p><blockquote><p>Always name the components with an uppercase first letter.</p></blockquote><h2 id="Your-First-React-Hook"><a href="#Your-First-React-Hook" class="headerlink" title="Your First React Hook"></a>Your First React Hook</h2><p><a href="https://jscomplete.com/playground/rgs1.1">Playground</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCounter(counter + 1)&#125;&gt;&#123;counter&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Button</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;mountNode&quot;</span>));</span><br></pre></td></tr></table></figure><p>Continuing with what we started in the previous video, the current code is available under this URL, and our component currently renders a stateless button. We now need to make the button increment a counter every time it’s clicked. We need a state object. To use a state object, react has a special function named <strong>useState</strong>. This is also globally available here in the playground. So we’re going to be invoking this function. This useState function is going to return two items for us. The first item is a state object, and the second item is a function to change that state object. The state object can be of any time you wish it to be. It could be a string, a number, or an array, or anything else. For this use case, we need it to be a number. I’m going to name this state object counter and name its updater function setCounter.</p><blockquote><p>useState() results:</p><ul><li>state object (getter)</li><li>updater function (setter)</li></ul></blockquote><p>The syntax you need here might look a bit weird, but since JavaScript functions can only return a single value, the useState function returns an array with exactly the two elements here. To make this work, we need a variable‑defining keyword before this syntax. I’m going to use const. This special syntax here is using JavaScript destructuring feature to capture these two variables in one line. It’s not magic or anything; useState returns an array with two elements, and in here we’re destructuring these two elements into variables in our Button component. The argument to useState is the initial value for the state element, counter in our case. Since we want that counter to be a number, we’ll set that to 0. To use the two new variables that we introduced, let me tell you a nice little thing about JSX. It supports displaying dynamic expressions if you place them within curly braces anywhere inside JSX. So if I make the button’s label into curly braces, and inside these curly braces put any JavaScript expression I want, I’ll use Math.random, and execute the code, the button will have random value every time I render this component. So to use this new state element, all we have to do is put the counter variable within curly braces and make that the label of the button element. The button will now be rendered with a label of 0. This is the same 0 that’s coming from the initial value we specified for useState. So any value initialized here will show up as the button’s label, but we’ll keep it as 0. Now to use the setCounter updater function, every time we click on this button, we need to introduce an event handler. This is going to look similar to the way we can do this with the DOM API. We define an onClick attribute on the button element. This onClick attribute is also case sensitive. It has to be camelCase like this. And unlike the DOM version of the onClick, which receives a string, this react onClick attribute receives a function reference. So you always specify that inside curly braces as well. In here, we’re going to specify a function reference. Let me create a dummy function here, function. I’m going to name it logRandom, and we’ll make this function console.log(Math.random). Very simple. To use this function as the onClick event handler, we pass in here the functions reference, its name, just like this. To see the console.log messages, we need to bring up the browser’s console here. And after executing this code, every time I now click on that button, the console will print a random value. Note that when we passed in the logRandom function here, we did not invoke the function. This will not work. You just need to pass in the pointer to the function. You can also inline the function definition right here inside the curly braces. So, basically, you paste in the function definition, and this will work as well. We can make this more concise by using the new arrow function syntax, which can fit in a single line here, () =&gt;, and then the body of the function directly after that. This highlighted part is an inline arrow function definition. We’re not invoking the function here. We’re defining it and passing this new reference to the onClick prop. This will work as well. So now that we saw how to wire an onClick event, what we need to do to make the counter count is to use the setCounter updater function that we got from useState. So instead of console logging a random value here, I’m going to use setCounter, invoke that function, and the argument to setCounter will become the new value of counter here. So if we pass in counter+1 as the argument just like this and execute this code, then every time the onClick event is triggered now, the counter will be incremented, and you’ll see the button behaving as we wanted it to. This useState function is called a hook in the react world. It is similar to a mix‑in or a module, but it is a stateful one that hooks this simple component into a state. What I need you to notice here is that to reflect the new value of the counter variable in the browser here, we did nothing. We just managed the state of the counter value. React is automatically updating the browser for us thanks to its reactive nature. We did not implement any transactions on this UI. We implemented the transactions on a JavaScript counter object in memory. Our UI implementation was basically telling React that we want the label of the button to always reflect the value of that counter object. We didn’t do any DOM updates. React did. You’re going to need a few more examples to appreciate this power. So let’s add some more features to this basic example. Let’s make our UI show many buttons and make all the buttons increment a single counter. But before we do that, let me give you a quick challenge. Instead of a simple counter, change this component to start the button with a label of 5, then double that value on each click. Go ahead and try to make this simple change, and you can see my solution under this URL.</p><h3 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h3><ul><li>Start the button with 5</li><li>Double the button’s label on each click</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">5</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCounter(counter + 5)&#125;&gt;&#123;counter&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Button</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;mountNode&quot;</span>));</span><br></pre></td></tr></table></figure><h1 id="Your-First-One-way-Data-Flow"><a href="#Your-First-One-way-Data-Flow" class="headerlink" title="Your First One-way Data Flow"></a>Your First One-way Data Flow</h1><p>In the previous video, we made a simple stateful Button component that renders an HTML button element and increments its numeric label when that button element is clicked. We introduced the useState React hook to manage a counter state. Let’s improve this component. First, don’t use long lines like this. They’re hard to read. So let me format this return value to make it more readable. There we go. Note how I used parentheses here, not curly braces. We’re not returning an object here. We’re returning a function call, remember, a React.createElement function call.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCounter(counter + 1)&#125;&gt;&#123;counter&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Button</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;mountNode&quot;</span>));</span><br></pre></td></tr></table></figure><p>Second Improvement. Instead of an inline function here, let’s create an official click handler function. This new function has to be defined inside the Button component because it needs access to the counter and setCounter variables. You can use any name here, but it’s commonly named handleClick. We can just paste the code we had inline before here as the body of this function. And in the onClick attribute here, we pass a reference to handleClick. Make sure this is all good and the button is still incriminating.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> setCounter(counter + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>&#123;counter&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Button</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;mountNode&quot;</span>));</span><br></pre></td></tr></table></figure><p>So far, we’ve only worked with one component. Let’s add more. Let’s split our one Button component into two. We’ll keep the Button component to be just the incrementer, and let’s add a new Display component, which is going to just display the value of the counter. This new Display component is going to be a pure presentational one. It will not have a state of its own. That’s normal. Not every React component has to have a stateful hook. So to create a new component, we define a function named Display, and we’ll make it return some HTML element. For now, let me just put a placeholder div in here and execute.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> setCounter(counter + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>&#123;counter&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Display</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Button</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;mountNode&quot;</span>));</span><br></pre></td></tr></table></figure><p>Notice that this new Display component did not show up because I have not included it in the rendered element yet. I just defined it. Let’s include it. So remember to include a component, we need to use it like that. However, you can’t just add it here as an adjacent sibling to the Button element. This will not work. Question, why does that not work?</p><blockquote><p>And the answer is because each one of these elements get translated into a function call. You have few options here to fix this problem.</p></blockquote><p>First, you can render an array of elements here and insert into that array as many React elements as you wish. This will work. This is usually a good solution when all the elements you’re rendering are coming from the same component in a dynamic way. It’s not ideal for the case we’re doing here.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> setCounter(counter + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>&#123;counter&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Display</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  [<span class="xml"><span class="tag">&lt;<span class="name">Button</span> /&gt;</span></span>, <span class="xml"><span class="tag">&lt;<span class="name">Display</span> /&gt;</span></span>],</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;mountNode&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>The other option is to make these two React elements the children of another React element. For example, we can just enclose them in a div, create a div element, then render the Button and the Display inside this div element. The React API supports this.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> setCounter(counter + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>&#123;counter&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Display</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Button</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Display</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;mountNode&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>In fact, React has a special object. If you need to enclose multiple elements like this without introducing a new div parent, you can use React.Fragment. This will do exactly the same thing that the div did, but no new DOM parent will be introduced. This case is so common in React that the JSX extension has a shortcut for it. Instead of typing React.Fragment, you can just have an empty tag. This empty tag, if supported in the environment, will get compiled to the React.Fragment version.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> setCounter(counter + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>&#123;counter&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Display</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">React.Fragment</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Button</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Display</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">React.Fragment</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;mountNode&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>For the case that we’re doing here, I think a div here is okay, so I’m going to keep that. Question, what can we do to make this better? And the answer is we should really extract this code into its own component. This new component can have any name, but you can just use App here. Go ahead and try to create this app component on your own. Make it return this DOM and use it in the ReactDOM.render call instead of what we have. We take the section, create a new function, name it App, make this function return the exact DOM tree that we have down under. And then in here, instead of all that, we can just render the App component just like that.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> setCounter(counter + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>&#123;counter&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Display</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Display</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;mountNode&quot;</span>));</span><br></pre></td></tr></table></figure><p>Since we’re going to display the counter’s value in the new Display component, we no longer need to show the counter’s value as the label of this button. Instead, I’m going to change the label to just +1.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> setCounter(counter + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Display</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Display</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;mountNode&quot;</span>));</span><br></pre></td></tr></table></figure><p>Now we need to display the counter value as the message in the Display component. But we have a problem. We actually have two problems. The first problem is that the counter is currently a state element in the Button component, and we need to access it in the Display component, which is a sibling of the Button component in the current tree. So this is not going to work. The state in a React component can be accessed only by that component itself and no one else. To make this counter state accessible to both sibling components, we need to lift it one level up and put it in their parent component, which is the App component that we just introduced. We just move this useState line down to the App component right here. I’ll initialize the counter with a different value here to make sure things are working. The logic of this handleClick function will need to change. We will come back to that in a minute. Let’s just comment it out for now. Now that we have the counter state element in the App compartment, which is the parent of the Display component, we can flow some data from the parent to the child. In this case, we need to flow the value of the counter state into the Display component, which brings us to the mighty props object. We haven’t really used it yet, so let me tell you about it. To pass a prop to a component, you specify an attribute here, just like in HTML. You can name the props of the component anything you want. For example, I’ll make the Display component to receive a prop named message, and the value of that message is the counter variable that’s coming from the useState hook. The Display component can now use its props object, which is the argument to the function here, and it’s usually named props. You don’t really have to name it props, but that’s the convention. All function components receive this object even when they have no attributes. So the Button component is currently receiving its props object, and that object so far has been empty. Because a component can receive many attributes, this props object will have a key value pair for each attribute. This means to access the message prop and place its value within the display div, we do curly braces and use props.message.</p><blockquote><p>Let me test that real quick, and we have an error, handleClick is not defined because we’ve used it here and commented it out here.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Display</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">42</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Display</span> <span class="attr">message</span>=<span class="string">&#123;counter&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;mountNode&quot;</span>));</span><br></pre></td></tr></table></figure><p>So let me just put an empty function here to get things working, and here we go. A counter value of 42 is now getting displayed. This is coming from the Display component. And what we did here is called the one‑way flow of data. Parent components can flow their data down to children components. Parent components can also flow down behavior to their children, which is what we need to do next. In the App component, since the counter state is here now, we need a function on this level to handle updating this state. Let’s name this function incrementCounter. The logic for this function is actually the exact same logic that we had before in the handleClick function in the Button component. So we can just move it in here. This new function is going to update the App component’s counter state to increment the counter value using the previous counter value. The onClick handler in the Button component now has to change. We want it to execute the incrementCounter function that’s in the App component, but a component can only access its own functions. So to make the Button component able to invoke the incrementCounter function in the App component, we can pass a reference to incrementCounter to the Button component as a prop. Yes, props can hold functions as well, not just data. Functions are just objects in JavaScript, and you can pass any object value as a prop. We can name this new prop anything. I’ll name it onClickFunction and pass it a value of incrementCounter, which is the reference to the function we defined in the App component. We can use this new pass down behavior directly in the onClick value. It will be a prop on this component, so we can access it with props.onClickFunction. Testing, all is good.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClickFunction&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Display</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">42</span>);</span><br><span class="line">  <span class="keyword">const</span> incrementCounter = <span class="function">() =&gt;</span> setCounter(counter + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClickFunction</span>=<span class="string">&#123;incrementCounter&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Display</span> <span class="attr">message</span>=<span class="string">&#123;counter&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;mountNode&quot;</span>));</span><br></pre></td></tr></table></figure><p>Something very powerful is happening here. The onClickFunction property allowed the button to invoke the App component’s incrementCounter function. It’s like when we click that button, the Button component reaches out to the App component and says hey parent, go ahead and invoke that incrementCounter behavior now. In reality, the App component is the one in control here, and the Button component is just following generic rules. If you analyze the code as it is now, you’ll realize how the Button component has no clue what happens when it gets clicked. It just follows the rules defined by the parent and invokes a generic onClick function. The parent controls what goes into that generic behavior. That’s basically the concept of responsibility isolation. Each component here has certain responsibilities, and they get to focus on that. Look at the Display component too. From its point of view, the message value is not a state. It’s just a value that the App component is passing to it. The Display component will always display that message. This is also a separation of responsibilities. As the designer of these components, you get to choose the level of responsibilities. For example, if we want to, we can make the responsibility of displaying the counter value part of the App component itself and not use a new Display component for that, but I like it this way. This App component has the responsibility of managing the counter state. That’s an important design decision that we made, and it is one you’re going to have to make a lot in a React application, where to define the state. And the answer is usually simple, down in a tree as close as possible to the children who need to access that value on the state.</p><h1 id="Components-Reusability"><a href="#Components-Reusability" class="headerlink" title="Components Reusability"></a>Components Reusability</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// const handleClick = () =&gt; setCounter(counter+1);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClickFunction&#125;</span>&gt;</span>+&#123;props.increment&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Display</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> incrementCounter = <span class="function">() =&gt;</span> setCounter(counter + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClickFunction</span>=<span class="string">&#123;incrementCounter&#125;</span> <span class="attr">increment</span>=<span class="string">&#123;1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClickFunction</span>=<span class="string">&#123;incrementCounter&#125;</span> <span class="attr">increment</span>=<span class="string">&#123;5&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClickFunction</span>=<span class="string">&#123;incrementCounter&#125;</span> <span class="attr">increment</span>=<span class="string">&#123;10&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClickFunction</span>=<span class="string">&#123;incrementCounter&#125;</span> <span class="attr">increment</span>=<span class="string">&#123;100&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Display</span> <span class="attr">message</span>=<span class="string">&#123;counter&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;mountNode&quot;</span>));</span><br></pre></td></tr></table></figure><p>After</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> props.onClickFunction(props.increment);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>+&#123;props.increment&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Display</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> incrementCounter = <span class="function">(<span class="params">incrementValue</span>) =&gt;</span></span><br><span class="line">    setCounter(counter + incrementValue);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClickFunction</span>=<span class="string">&#123;incrementCounter&#125;</span> <span class="attr">increment</span>=<span class="string">&#123;1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClickFunction</span>=<span class="string">&#123;incrementCounter&#125;</span> <span class="attr">increment</span>=<span class="string">&#123;5&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClickFunction</span>=<span class="string">&#123;incrementCounter&#125;</span> <span class="attr">increment</span>=<span class="string">&#123;10&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClickFunction</span>=<span class="string">&#123;incrementCounter&#125;</span> <span class="attr">increment</span>=<span class="string">&#123;100&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Display</span> <span class="attr">message</span>=<span class="string">&#123;counter&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;mountNode&quot;</span>));</span><br></pre></td></tr></table></figure><h1 id="Tree-Reconciliation-in-Action"><a href="#Tree-Reconciliation-in-Action" class="headerlink" title="Tree Reconciliation in Action"></a>Tree Reconciliation in Action</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;mountNode&quot;</span>).innerHTML = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    Hello HTML</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  React.createElement(<span class="string">&quot;div&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;Hello React&quot;</span>),</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;mountNode2&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// currentTime: (new Date).toLocaleTimeString()</span></span><br><span class="line"><span class="comment">//  setInterval(fn, 1000);</span></span><br></pre></td></tr></table></figure><p>We’ll first have to find the element that needs changing in the DOM tree and add some more imperative logic to change its content. We are not doing that in React. We’re being declarative in React. We just told React that we’d like a pre element with the date string. No imperative logic is here, and yet we’re still getting the efficiency of a tuned‑up imperative alternative. This is the subtle power here. The React way is not only a lot more efficient, but it also removes a big layer of complexity about the way we think about updating user interfaces. Having React do all the computations about whether we should or should not update the DOM enables us to focus on thinking about our data and state and the way to model that state. We then only manage the updates that’s needed on the state without worrying about the steps needed to reflect these updates in the actual user interface in the browser because we know React will do exactly that for us, and it will do it in an efficient way.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p><strong>Components and reactive updates</strong><br><strong>Virtual DOM nodes and JSX</strong><br><strong>Props and State</strong></p><ul><li>(props) =&gt; {}</li><li>[val, setVal] = useState(initialVal)</li><li>Immutable props. Mutatable state</li></ul><p><strong>ReactDOM.render</strong></p><ul><li><code>&lt;Component /&gt;</code></li><li>DOM node</li></ul><p><strong>React events (onClick, onSubmit, …)</strong></p><p><strong>Functions and class components</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="react" scheme="http://blog.likweitan.tech/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Simulation Case Study 模拟案例研究</title>
    <link href="http://blog.likweitan.tech/posts/50a7ff60/"/>
    <id>http://blog.likweitan.tech/posts/50a7ff60/</id>
    <published>2020-04-20T13:03:33.000Z</published>
    <updated>2021-05-31T13:13:46.724Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Grocery-Stores"><a href="#Grocery-Stores" class="headerlink" title="Grocery Stores"></a>Grocery Stores</h1><h2 id="Simulation-of-Queueing-Systems"><a href="#Simulation-of-Queueing-Systems" class="headerlink" title="Simulation of Queueing Systems"></a>Simulation of Queueing Systems</h2><p>A queuing system is described by</p><ul><li>Calling population</li><li>Arrival rate</li><li>Service mechanism</li><li>System capacity</li><li>Queueing discipline</li></ul><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><ul><li><p>Analysis of a small grocery store</p><ul><li>One checkout counter</li><li>Customers arrive at random times from {1,2,…,8}</li><li>Service times vary from {1,2,…,6}</li><li>Consider the system for 100 customers</li></ul></li><li><p>Problems/Simplifications</p><ul><li>Sample size is too small to be able to draw reliable conclusions</li><li>Initial condition is not considered</li></ul></li><li><p>Interesting results for a manager, but</p><ul><li>longer simulation run would increase the accuracy</li></ul></li><li><p>Some interpretations</p><ul><li>Average waiting time is not high</li><li>Server has not undue amount of idle time, it is well loaded</li><li>Nearly half of the customers have to wait</li></ul></li></ul><h2 id="Final-Exam-Question-May-2018"><a href="#Final-Exam-Question-May-2018" class="headerlink" title="Final Exam Question (May 2018)"></a>Final Exam Question (May 2018)</h2><p>A queuing system in a minimarket occur randomly with inter-arrival time {1..6} and service time {1..10}. The following table Q1 depicts results of the simulation towards five regular customers.</p><table><thead><tr><th align="center">Customer No</th><th align="center">Customer Name</th><th align="center">Inter-arrival time</th><th align="center">Arrival Time on clock</th><th align="center">Service time</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">Bobby</td><td align="center">-</td><td align="center">0</td><td align="center">10</td></tr><tr><td align="center">2</td><td align="center">Lucy</td><td align="center">5</td><td align="center">5</td><td align="center">8</td></tr><tr><td align="center">3</td><td align="center">Anie</td><td align="center">2</td><td align="center">7</td><td align="center">9</td></tr><tr><td align="center">4</td><td align="center">Diana</td><td align="center">1</td><td align="center">8</td><td align="center">5</td></tr><tr><td align="center">5</td><td align="center">Stewart</td><td align="center">2</td><td align="center">10</td><td align="center">2</td></tr></tbody></table><p>Analyze the simulation results and answer the following questions with appropriate explanation:</p><blockquote><p>Find ONE(1) potential complain that may arise from the above simulation. What is the best way to avoid this complain?</p></blockquote><p>ss</p><blockquote><p>Were Bobby and Lucy queuing before approaching cashier? What could be the reason?</p></blockquote><blockquote><p>How long the cashier were idle in between services? Will it affect the business?</p></blockquote><p>The cashier were not idle in between services.</p><blockquote><p>Assume Diana is a customer who uses a wheelchairand she comes alone. Should she deserve a special assistance while queuing? Discuss your answer.</p></blockquote><table><thead><tr><th align="center">Customer</th><th align="center">Interarrival Time</th><th align="center">Arrival Time</th><th align="center">Service Time</th><th align="center">Time Service Begins</th><th align="center">Time Service Ends</th><th align="center">Waiting Time in Queue</th><th align="center">Time Customer in System</th><th align="center">Idle Time of Server</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">10</td><td align="center">0</td><td align="center">10</td><td align="center">0</td></tr><tr><td align="center">2</td><td align="center">5</td><td align="center">5</td><td align="center">8</td><td align="center">10</td><td align="center">18</td><td align="center">5</td><td align="center">13</td><td align="center">0</td></tr><tr><td align="center">3</td><td align="center">2</td><td align="center">7</td><td align="center">9</td><td align="center">18</td><td align="center">27</td><td align="center">11</td><td align="center">20</td><td align="center">0</td></tr><tr><td align="center">4</td><td align="center">1</td><td align="center">8</td><td align="center">5</td><td align="center">27</td><td align="center">32</td><td align="center">19</td><td align="center">24</td><td align="center">0</td></tr><tr><td align="center">5</td><td align="center">2</td><td align="center">10</td><td align="center">2</td><td align="center">32</td><td align="center">34</td><td align="center">22</td><td align="center">24</td><td align="center">0</td></tr><tr><td align="center"><strong>Total</strong></td><td align="center">10</td><td align="center"></td><td align="center">34</td><td align="center"></td><td align="center"></td><td align="center">57</td><td align="center">91</td><td align="center">0</td></tr></tbody></table><h1 id="Call-Centers"><a href="#Call-Centers" class="headerlink" title="Call Centers"></a>Call Centers</h1><ul><li><p>Consider a Call Center where technical personnel take calls and provide service</p></li><li><p>Two technical support people (2 server) exists</p><ul><li>Able - more experienced, provides service <strong>faster</strong></li><li>Baker - provides service <strong>slower</strong></li></ul></li><li><p>Rule</p><ul><li>Able gets call if both people are idle</li><li>Try other rules<ul><li>Baker gets call if both are idle</li><li>Call is assigned randomly to Able and Baker</li></ul></li></ul></li><li><p>Goal of study: Find out how well the current rule works</p></li><li><p>Interarrival distribution of calls for technical support</p></li><li><p>Simulation run for 100 calls</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="http://s1.wailian.download/2020/04/23/image.png"></p><h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><p>Inter-Arrival Time (I) and Service Time (S) is depicted as {I,S} below.<br>{0,3}<br>{2,4}<br>{3,2}<br>{2,5}<br>{2,2}<br>{3,3}</p><blockquote><p>Identify how many calls completed by Able and Baker, caller delay and time in the system for the above arrivals.</p></blockquote><table><thead><tr><th>Caller Nr.</th><th>Interarrival Time</th><th>Arrival Time</th><th>When Able Avail.</th><th>When Baker Avail.</th><th>Server Chosen</th><th>Service Time</th><th>Time Service Begins</th><th>Able’s Service Compl. Time</th><th>Baker’s Service Compl. Time</th><th>Caller Delay</th><th>Time in System</th></tr></thead><tbody><tr><td>1</td><td>-</td><td>0</td><td>0</td><td>0</td><td>Able</td><td>3</td><td>0</td><td>3</td><td></td><td>0</td><td>3</td></tr><tr><td>2</td><td>2</td><td>2</td><td>3</td><td>2</td><td>Baker</td><td>4</td><td>2</td><td></td><td>6</td><td>0</td><td>4</td></tr><tr><td>3</td><td>3</td><td>5</td><td>5</td><td>6</td><td>Able</td><td>2</td><td>5</td><td>7</td><td></td><td>0</td><td>2</td></tr><tr><td>4</td><td>2</td><td>7</td><td>7</td><td>7</td><td>Able</td><td>5</td><td>7</td><td>12</td><td></td><td>0</td><td>5</td></tr><tr><td>5</td><td>2</td><td>9</td><td>12</td><td>9</td><td>Baker</td><td>2</td><td>9</td><td></td><td>11</td><td>0</td><td>2</td></tr><tr><td>6</td><td>3</td><td>12</td><td>12</td><td>11</td><td>Able</td><td>3</td><td>12</td><td>15</td><td></td><td>0</td><td>3</td></tr><tr><td>Total</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>0</td><td>19</td></tr></tbody></table><h1 id="Inventory-System"><a href="#Inventory-System" class="headerlink" title="Inventory System"></a>Inventory System</h1><ul><li>Distributes items from current inventory to customers</li><li>Customer demand is discrete</li><li>Simple &lt;-&gt; one type of item</li></ul><h2 id="Final-Exam-Question"><a href="#Final-Exam-Question" class="headerlink" title="Final Exam Question"></a>Final Exam Question</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h3><p>An inventory system is doing a periodic inventory review and simulation to ensure the flow is balanced between stock and demand. Let (s,S) = (25,65) where s is the minimum inventory level and S is the maximum inventory level.</p><blockquote><p>Discuss FIVE(5) inventory system costs that affect the performance of an inventory system.</p></blockquote><ul><li>Holding cost<br>for items in inventory</li><li>Shortage cost<br>for unmet demand</li><li>Setup cost<br>fixed cost when order is placed</li><li>Item cost<br>per-item order cost</li><li>Ordering cost<br>sum of setup and items costs</li></ul><blockquote><p>Assume n = 10 for the time intervals and the value of i (inventory level) and di (demand quantity during the interval) is given by the following table.</p></blockquote><table><thead><tr><th align="center"><em>i</em></th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">10</th></tr></thead><tbody><tr><td align="center"><em>di</em></td><td align="center">40</td><td align="center">25</td><td align="center">35</td><td align="center">25</td><td align="center">55</td><td align="center">40</td><td align="center">35</td><td align="center">25</td><td align="center">30</td><td align="center">45</td></tr></tbody></table><blockquote><p>With the aid of the diagram, find any <em>shortage</em> that occurs in the system during the interval. Should the inventory level (s,S) be modified based on this periodic review? Explain your answer.</p></blockquote><h1 id="Poisson-Distribution"><a href="#Poisson-Distribution" class="headerlink" title="Poisson Distribution"></a>Poisson Distribution</h1><ul><li>A Poisson distribution helps in describing the chances<br>of occurrence of a number of events in some given time interval that the value of average number of<br>occurrence of the event is known.</li><li>This is a major and only condition of Poisson distribution.</li><li>An experiment in statistics is termed as Poisson experiment when it possesses the following probabilities:<ul><li>The outcomes of the experiment can be easily classified as either success or failure.</li><li>The average of the number of successes within a region that is specified is known.</li><li>The probability of occurrence of a success is always proportional to the size of the specified region.</li><li>The probability of occurrence of success in a very small region is zero virtually.</li><li>It is to be noted that the region that is specified can take different forms like area, length, time period etc</li></ul></li></ul><blockquote><p><strong>Predict future occurences based on history</strong><br>Step 1 - get &amp;#x03BB (history of things occured)<br>Step 2 - get table of &amp;#x03BB (poisson distribution)<br>Step 3 - project probability numbers ~ exact value ~ range of numbers</p></blockquote><h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h2><table><thead><tr><th align="center">x</th><th align="center">&amp;#x03BB</th><th align="center">P(<em>x</em>) for &amp;#x03BB = 3</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">3</td><td align="center">0.04979</td></tr><tr><td align="center">1</td><td align="center">3</td><td align="center">0.14936</td></tr><tr><td align="center">2</td><td align="center">3</td><td align="center">0.22404</td></tr><tr><td align="center">3</td><td align="center">3</td><td align="center">0.22404</td></tr><tr><td align="center">4</td><td align="center">3</td><td align="center">0.16803</td></tr><tr><td align="center">5</td><td align="center">3</td><td align="center">0.10082</td></tr><tr><td align="center">6</td><td align="center">3</td><td align="center">0.05041</td></tr><tr><td align="center">7</td><td align="center">3</td><td align="center">0.02160</td></tr><tr><td align="center">8</td><td align="center">3</td><td align="center">0.00810</td></tr><tr><td align="center">9</td><td align="center">3</td><td align="center">0.00270</td></tr><tr><td align="center">10</td><td align="center">3</td><td align="center">0.00081</td></tr><tr><td align="center">11</td><td align="center">3</td><td align="center">0.00022</td></tr><tr><td align="center">12</td><td align="center">3</td><td align="center">0.00006</td></tr><tr><td align="center">13</td><td align="center">3</td><td align="center">0.00001</td></tr><tr><td align="center">14</td><td align="center">3</td><td align="center">0.00000</td></tr><tr><td align="center">15</td><td align="center">3</td><td align="center">0.00000</td></tr></tbody></table><blockquote><ol><li>A man was able to complete 3 files a day on an average. Find the probability that he can complete 5 files the next day. <em>Hint: find the number on the table.</em></li></ol></blockquote><p>P(X = 5) = 0.00757</p><blockquote><ol start="2"><li>The number of calls coming per minute into a hotels reservation center is Poisson random variable with mean. Find the probability that no calls come in a given 1 minute period. <em>Hint: find the probability number on the table.</em></li></ol></blockquote><p>P(X = 0) = 0.00005</p><blockquote><ol start="3"><li>Let X equal the number of typos on a printed page with a mean of 3 typos per page. What is the probability that a randomly selected page has at least one typo on it? <em>Hint: P(X ≥ 1) = 1 − P(X = 0)</em></li></ol></blockquote><p>P(X ≥ 1) = 1 − P(X = 0) = 1 - 0.00005 = 0.99995</p><h1 id="Monte-Carlo-Simulation"><a href="#Monte-Carlo-Simulation" class="headerlink" title="Monte Carlo Simulation"></a>Monte Carlo Simulation</h1><blockquote><p><strong>Predict future achievement of a company based on random numbers</strong><br>Step 1 - relative frequency table<br>Step 2 - range of distribution<br>Step 3 - random numbers are projected to the range of distribution<br>Step 4 - Calculate the company revenue</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>PHP: Lab Test 测验</title>
    <link href="http://blog.likweitan.tech/posts/1b584c11/"/>
    <id>http://blog.likweitan.tech/posts/1b584c11/</id>
    <published>2020-04-20T10:41:34.000Z</published>
    <updated>2021-05-31T13:13:46.721Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><h2 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h2><p>Write a program that is able to accept 2 inputs (provide textbox for key in input) which is the username (john) and password (abc123). When click login button, it heading to success web page which display the username key in by the user. Take note that in order to proceed to success web page require authentication of correct username and password, else it goes to fail web page. In addition the success web page is protected by the session.</p><p><strong>Answer</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;form action=&quot;action.php&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">        username &lt;input name=&quot;username&quot; type=&quot;text&quot;&gt;&lt;br&gt;</span><br><span class="line">        password &lt;input name=&quot;password&quot; type=&quot;password&quot;&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;login&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $username = $_REQUEST[&#x27;username&#x27;];</span><br><span class="line">    $password = $_REQUEST[&#x27;password&#x27;];</span><br><span class="line"></span><br><span class="line">    if($username == &#x27;john&#x27; &amp;&amp; $password == &#x27;abc123&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        session_start();</span><br><span class="line">        $_SESSION[&#x27;id&#x27;] = $username;</span><br><span class="line">        header(&quot;Location: success.php&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">        header(&quot;Location: fail.php&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h2><p>Modify/fix the code below in which when the VIEW hyperlink is click, it directs you to next web page (b.php) with this information (the given variable $a &amp; $b) and the information is hold by the variables is able to be display on the other web page. You will need to add some line of code to display the values on the web page (b.php). Take note there is only TWO (2) web pages involve and the value of variable must be transmitted via the hyperlink.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $a = &quot;john&quot;;</span><br><span class="line">    $b = &quot;123&quot;;</span><br><span class="line">    echo &lt;a href=&quot;b.php?a&quot;=.&quot;$a&quot;.&quot;\&quot;&gt;VIEW&lt;/a&gt;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>Answer</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $a = &quot;john&quot;;</span><br><span class="line">    $b = &quot;123&quot;;</span><br><span class="line">    echo &#x27;&lt;a href=&quot;b.php?id1=&#x27;.$a.&#x27;&amp;id2=&#x27;.$b.&#x27;&quot;&gt;VIEW&lt;/a&gt;&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo $_GET[&#x27;id1&#x27;];</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">    echo $_GET[&#x27;id2&#x27;];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h2><p>Write a program that able compute and display even number from 1-10, also don’t display 6 and 10. Each output must be displayed on new line. (Displaying string directly subject to even number is not allowed and the validation of even number should include 1 until 10)</p><p><strong>Answer</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    for ($number = 1; $number &lt;= 10; $number++)</span><br><span class="line">    &#123;</span><br><span class="line">        if($number!=6 &amp;&amp; $number!=10 &amp;&amp; $number%2==0)</span><br><span class="line">            echo $number.&quot;&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Programming" scheme="http://blog.likweitan.tech/categories/Programming/"/>
    
      <category term="PHP" scheme="http://blog.likweitan.tech/categories/Programming/PHP/"/>
    
    
      <category term="php" scheme="http://blog.likweitan.tech/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP: Array 矩阵</title>
    <link href="http://blog.likweitan.tech/posts/9ec957eb/"/>
    <id>http://blog.likweitan.tech/posts/9ec957eb/</id>
    <published>2020-04-19T13:36:08.000Z</published>
    <updated>2021-05-31T13:13:46.721Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><ul><li>An array is a special variable using <strong>which we can store multiple values in a single variable</strong></li><li>Names of 5 employee can be stored using 5 variables. If the case is for 50 employees, then array is the solution</li><li>An array can hold multiple values under a single name which can be accessed using the <strong>index position</strong></li><li>Array can be created using <strong>array();</strong> construct</li><li>The values in an array can be either an integer, float, string, object or even another array</li><li>An array can hold <strong>data of mixed types</strong></li><li>No restriction in the number of values an array can hold</li><li>Each <strong>value</strong> in an array is termed as <strong>element/value</strong>. Each<br>element has its own unique index</li></ul><h1 id="Advantages-of-Array"><a href="#Advantages-of-Array" class="headerlink" title="Advantages of Array"></a>Advantages of Array</h1><ul><li>Easy to <strong>manipulate</strong></li><li>Easy to work with <strong>many values</strong></li><li>Can use many built-in array functions like sort, search, merge etc</li></ul><h1 id="Displaying-the-array-as-an-output"><a href="#Displaying-the-array-as-an-output" class="headerlink" title="Displaying the array as an output"></a>Displaying the array as an output</h1><p>Displaying output on the screen is differ with the<br>memory value on the computer <strong>i.e.</strong> <em>The value of $a when output is 10 but the value in the memory is 11</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo ();</span><br><span class="line">print ();</span><br><span class="line">print_r();</span><br></pre></td></tr></table></figure><p><strong>Example 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$car=array(&quot;volvo&quot;,&quot;mercedes&quot;,&quot;ferrari&quot;,&quot;lamborghini&quot;);</span><br><span class="line">print_r($car);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Array( [0] =&gt; volvo[1] =&gt; mercedes[2] =&gt; ferrari[3] =&gt; lamborghini )</p></blockquote><h1 id="Array-Functions"><a href="#Array-Functions" class="headerlink" title="Array Functions"></a>Array Functions</h1><table><thead><tr><th>Array Function</th><th>Description</th></tr></thead><tbody><tr><td>array()</td><td>The function is used to create an array</td></tr><tr><td>array_change_key_case()</td><td>It returns an array with all keys in lowercase or uppercase</td></tr><tr><td>array_chunk()</td><td>It splits an array into chunks of arrays</td></tr><tr><td>array_combine()</td><td>It is used to combine two arrays and creates one array for keys and another array for its values</td></tr><tr><td>array_count_values()</td><td>It returns the count of all the array values</td></tr><tr><td>array_diff()</td><td>The function compares array values and returns the difference</td></tr></tbody></table><h2 id="array-change-key-case-var-CASE"><a href="#array-change-key-case-var-CASE" class="headerlink" title="array_change_key_case(var, CASE);"></a>array_change_key_case(var, CASE);</h2><p><strong>Example 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$car=array(&quot;s40&quot;=&gt;&quot;volvo&quot;,&quot;amg&quot;=&gt;&quot;mercedes&quot;,&quot;sauber&quot;=&gt;&quot;ferrari&quot;,&quot;sil&quot;=&gt;&quot;lamborghini&quot;);</span><br><span class="line">print_r($car);</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">$car=array_change_key_case($car,CASE_UPPER);</span><br><span class="line">print_r($car);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Array( [s40] =&gt; volvo[amg] =&gt; mercedes[sauber] =&gt; ferrari[sil] =&gt; lamborghini )<br>Array( [S40] =&gt; volvo[AMG] =&gt; mercedes[SAUBER] =&gt; ferrari[SIL] =&gt; lamborghini )</p></blockquote><p><strong>Example 2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$car=array(&quot;s40&quot;=&gt;&quot;volvo&quot;,&quot;amg&quot;=&gt;&quot;mercedes&quot;,&quot;sauber&quot;=&gt;&quot;ferrari&quot;,&quot;sil&quot;=&gt;&quot;lamborghini&quot;);</span><br><span class="line">print_r($car);</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">$car=array_change_key_case($car,CASE_LOWER);</span><br><span class="line">print_r($car);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Array( [S40] =&gt; volvo[AMG] =&gt; mercedes[SAUBER] =&gt; ferrari[SIL] =&gt; lamborghini )<br>Array( [s40] =&gt; volvo[amg] =&gt; mercedes[sauber] =&gt; ferrari[sil] =&gt; lamborghini )</p></blockquote><p><strong>Example 3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$car=array(&quot;S40&quot;=&gt;&quot;volvo&quot;,&quot;AMG&quot;=&gt;&quot;mercedes&quot;,&quot;SAUBER&quot;=&gt;&quot;ferrari&quot;,&quot;SIL&quot;=&gt;&quot;lamborghini&quot;);</span><br><span class="line">print_r($car);</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">$car=array_change_key_case($car,CASE_LOWER);</span><br><span class="line">print_r($car);</span><br><span class="line">$car=array_change_key_case($car,CASE_UPPER);</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">print_r($car);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Array( [S40] =&gt; volvo[AMG] =&gt; mercedes[SAUBER] =&gt; ferrari[SIL] =&gt; lamborghini )<br>Array( [s40] =&gt; volvo[amg] =&gt; mercedes[sauber] =&gt; ferrari[sil] =&gt; lamborghini )<br>Array( [S40] =&gt; volvo[AMG] =&gt; mercedes[SAUBER] =&gt; ferrari[SIL] =&gt; lamborghini )</p></blockquote><h2 id="array-flip"><a href="#array-flip" class="headerlink" title="array_flip()"></a>array_flip()</h2><p><strong>Example 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &quot;before flip:&quot;.&quot;&lt;br&gt;&quot;;</span><br><span class="line">print_r($a=array_flip(array(&quot;a&quot;=&gt;&quot;b&quot;,&quot;c&quot;=&gt;&quot;d&quot;)));</span><br><span class="line">echo &quot;&lt;br&gt;&quot;.&quot;after flip:&quot;,&quot;&lt;br&gt;&quot;;</span><br><span class="line">print_r(array_flip($a));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>before flip:<br>Array( [b] =&gt; a [d] =&gt; c )<br>after flip:<br>Array( [a] =&gt; b [c] =&gt; d )</p></blockquote><h2 id="array-chunk-var-count"><a href="#array-chunk-var-count" class="headerlink" title="array_chunk(var, count)"></a>array_chunk(var, count)</h2><p><strong>Example 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$car=array(&quot;volvo&quot;,&quot;mercedes&quot;,&quot;ferrari&quot;,&quot;lamborghini&quot;);</span><br><span class="line">$car=array_chunk($car,2);</span><br><span class="line">print_r($car);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>before flip:<br>Array( [b] =&gt; a [d] =&gt; c )<br>after flip:<br>Array( [a] =&gt; b [c] =&gt; d )</p></blockquote><h2 id="array-combine-arr1-arr2"><a href="#array-combine-arr1-arr2" class="headerlink" title="array_combine(arr1, arr2)"></a>array_combine(arr1, arr2)</h2><p><strong>Example 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$user_key=array(&quot;user1&quot;,&quot;user2&quot;,&quot;user3&quot;,&quot;user4&quot;);</span><br><span class="line">$user_val=array(&quot;John&quot;,&quot;Alice&quot;,&quot;Ravi&quot;,&quot;Lim&quot;);</span><br><span class="line">$cmbine=array_combine($user_key,$user_val);</span><br><span class="line">print_r($cmbine);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Array( [user1] =&gt; John [user2] =&gt; Alice [user3] =&gt; Ravi [user4] =&gt; Lim )</p></blockquote><p><em>Both must have samenumber of arguments!</em></p><h2 id="array-count-values-arr"><a href="#array-count-values-arr" class="headerlink" title="array_count_values(arr)"></a>array_count_values(arr)</h2><p><strong>Example 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$car=array(&quot;volvo&quot;,&quot;mercedes&quot;,&quot;ferrari&quot;,&quot;ferrari&quot;);</span><br><span class="line">$car=array_count_values($car);</span><br><span class="line">print_r($car);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Array( [volvo] =&gt; 1 [mercedes] =&gt; 1 [ferrari] =&gt; 2 )</p></blockquote><h2 id="array-diff-arr1-arr2"><a href="#array-diff-arr1-arr2" class="headerlink" title="array_diff(arr1, arr2)"></a>array_diff(arr1, arr2)</h2><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$car=array(&quot;volvo&quot;,&quot;mercedes&quot;,&quot;ferrari&quot;,&quot;ferrar&quot;);</span><br><span class="line">$cars=array(&quot;volvo&quot;,&quot;mercedes&quot;);</span><br><span class="line">$dif=array_diff($car,$cars);</span><br><span class="line">print_r($dif);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Array( [2] =&gt; ferrari[3] =&gt; ferrar )</p></blockquote><h1 id="Types-of-array"><a href="#Types-of-array" class="headerlink" title="Types of array"></a>Types of array</h1><h2 id="Indexed-array"><a href="#Indexed-array" class="headerlink" title="Indexed array"></a>Indexed array</h2><ul><li>Stores each array element with a numeric index. array</li></ul><p><strong>Example 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$names=array(&quot;Pinky&quot;, &quot;Tom&quot;,&quot;Prince&quot;);</span><br><span class="line">echo &quot;Name list : $names[0], $names[1], $names[2]&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Name list: Pinky, Tom, Prince</p></blockquote><p><strong>Example 2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$names=array(&quot;Pinky&quot;, &quot;Tom&quot;, &quot;Prince&quot;);</span><br><span class="line">foreach($names as $str)&#123;</span><br><span class="line">echo $str .&quot;&amp;nbsp&quot;;&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Pinky Tom Prince</p></blockquote><h2 id="Associative-array"><a href="#Associative-array" class="headerlink" title="Associative array"></a>Associative array</h2><ul><li>Stores each array element as a key to value as a pair. Key can be a user defined string</li></ul><p><strong>Example 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$department = array(&quot;Pinky&quot;=&gt;&quot;Testing&quot;, &quot;Tom&quot;=&gt;&quot;Development&quot;,</span><br><span class="line">&quot;Prince&quot;=&gt;&quot;Admin&quot;); echo &#x27;Pinky belongs to</span><br><span class="line">&#x27;.$department[&quot;Pinky&quot;].&quot;&lt;br /&gt;&quot;;</span><br><span class="line">echo &#x27;Tom belongs to</span><br><span class="line">&#x27;.$department[&quot;Tom&quot;].&quot;&lt;br /&gt;&quot;; echo</span><br><span class="line">&#x27;Prince belongs to</span><br><span class="line">&#x27;.$department[&quot;Prince&quot;].&quot;&lt;br /&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Pinky Tom Prince</p></blockquote><p><strong>Example 2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$department = array(&quot;Pinky&quot;=&gt;&quot;Testing&quot;, &quot;Tom&quot;=&gt;&quot;Development&quot;,</span><br><span class="line">&quot;Prince&quot;=&gt;&quot;Admin&quot;);</span><br><span class="line">foreach($department as $k=&gt;$v)&#123;</span><br><span class="line">echo &quot;Name : &quot;.$k.&quot; Department :&quot;.$v.&quot;&lt;br /&gt;&quot;;&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Name : Pinky Department : Testing<br>Name : Tom Department : Development<br>Name : Prince Department : Admin</p></blockquote><h2 id="Multidimensional-array"><a href="#Multidimensional-array" class="headerlink" title="Multidimensional array"></a>Multidimensional array</h2><ul><li>Element of an array can contain one or more array</li></ul><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$employee = array (</span><br><span class="line">array(1,&quot;Pinky&quot;,&quot;Testing&quot;),</span><br><span class="line">array(2,&quot;Tom&quot;,&quot;Development&quot;),</span><br><span class="line">array(3,&quot;Prince&quot;,&quot;Admin&quot;)</span><br><span class="line">);</span><br><span class="line">for ($row = 0; $row &lt; 3; $row++) &#123;</span><br><span class="line">for ($col = 0; $col &lt; 3; $col++) &#123;</span><br><span class="line">echo $employee[$row][$col].&quot; &quot;; &#125;</span><br><span class="line">echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = array (</span><br><span class="line">array(1,&quot;Pinky&quot;,&quot;Testing&quot;),</span><br><span class="line">array(2,&quot;Tom&quot;,&quot;Development&quot;),</span><br><span class="line">array(3,&quot;Prince&quot;,&quot;Admin&quot;)</span><br><span class="line">);</span><br><span class="line">foreach($a as $a)&#123;</span><br><span class="line">foreach ($a as $a) &#123; echo $a; &#125;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>1 Pinky Testing<br>2 Tom Development<br>3 Prince Admin</p></blockquote><h1 id="Convert-ARRAY-to-STRING"><a href="#Convert-ARRAY-to-STRING" class="headerlink" title="Convert ARRAY to STRING"></a>Convert ARRAY to STRING</h1><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implode([separator,]$arrayname)</span><br></pre></td></tr></table></figure><ul><li>The separator specifies what is to be inserted between the array elements</li><li>In implode function, the separator is optional</li><li>The default separator is” “</li></ul><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$hobbies=array(&quot;Reading Books&quot;,&quot;PlayingGolf&quot;,&quot;WatchingTennis&quot;,&quot;Dancing&quot;);</span><br><span class="line">$hobby=implode(&quot;::&quot;,$hobbies);</span><br><span class="line">echo $hobby;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Reading Books :: Playing Golf :: Watching Tennis ::Dancing</p></blockquote><h1 id="Convert-STRING-to-ARRAY"><a href="#Convert-STRING-to-ARRAY" class="headerlink" title="Convert STRING to ARRAY"></a>Convert STRING to ARRAY</h1><p><strong>Syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explode(separator,string[,limit])</span><br></pre></td></tr></table></figure><ul><li>The separator will specify where to break the string. It is mandatory</li><li>Limit specifies number of elements to return. This parameter is optional</li></ul><p><strong>Example 1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$hobbies=array(&quot;Reading Books&quot;,&quot;PlayingGolf&quot;,&quot;WatchingTennis&quot;,&quot;Dancing&quot;);</span><br><span class="line">$hobby=implode(&quot;::&quot;,$hobbies);</span><br><span class="line">echo $hobby;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Array([0]=&gt;Golf[1]=&gt;Cricket[2]=&gt;Tennis[3]=&gt;Football[4]=&gt;Hockey)</p></blockquote><p><strong>Example 2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$games=&quot;Golf,Cricket,Tennis,Football,Hockey&quot;;</span><br><span class="line">$strgtoarr=explode(&quot;,&quot;,$games);</span><br><span class="line">print_r($strgtoarr);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Array([0]=&gt;Golf,Cricket,Tennis,Football,Hockey)</p></blockquote><p><strong>Example 3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$games=&quot;Golf,Cricket,Tennis,Football,Hockey&quot;;</span><br><span class="line">$strgtoarr=explode(&quot;s&quot;,$games);</span><br><span class="line">print_r($strgtoarr);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Array([0]=&gt;Golf,Cricket,Tenni[1]=&gt;,Football,Hockey)</p></blockquote><h1 id="Array-Sorting"><a href="#Array-Sorting" class="headerlink" title="Array Sorting"></a>Array Sorting</h1><p>Functions used to sort</p><ul><li>an array in a particular orderare</li><li>Sort by default based on value</li><li>asortbased pnvalue</li><li>ksortbased on key</li><li>rsort(opposite)</li><li>arsort(opposite)</li><li>krsort(opposite)</li></ul><p><strong>Example</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$hobbies=array(&quot;a&quot;,&quot;b&quot;,&quot;d&quot;,&quot;c&quot;);</span><br><span class="line">sort($hobbies);</span><br><span class="line">foreach($hobbies as $temp) &#123;</span><br><span class="line">echo $temp.&quot;&lt;br&gt;&quot;;&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><p>a<br>b<br>c<br>d</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="php" scheme="http://blog.likweitan.tech/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP: Basic String Manipulation 基本的字符串操作</title>
    <link href="http://blog.likweitan.tech/posts/587032ad/"/>
    <id>http://blog.likweitan.tech/posts/587032ad/</id>
    <published>2020-02-17T13:59:25.000Z</published>
    <updated>2021-05-31T13:13:46.721Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="String-Manipulation"><a href="#String-Manipulation" class="headerlink" title="String Manipulation"></a>String Manipulation</h1><h2 id="Single-Quoted-String"><a href="#Single-Quoted-String" class="headerlink" title="Single Quoted String"></a>Single Quoted String</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span>=<span class="string">&quot;PHP&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Welcome to learn $str&#x27;</span>;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome to learn $str</span><br></pre></td></tr></table></figure><blockquote><p>Because single quoted treat is as a string as a whole.</p></blockquote><h2 id="Double-Quoted-String"><a href="#Double-Quoted-String" class="headerlink" title="Double Quoted String"></a>Double Quoted String</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str=&quot;PHP&quot;;</span><br><span class="line">echo &quot;Welcome to learn $str&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome to learn PHP</span><br></pre></td></tr></table></figure><blockquote><p>Double quotation has the ability to detect the keyword(variable).</p></blockquote><h3 id="strtoupper-argument"><a href="#strtoupper-argument" class="headerlink" title="strtoupper(argument)"></a>strtoupper(argument)</h3><p>Change to uppercase</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str=&quot;hello people&quot;;</span><br><span class="line">$converted_str=strtoupper($str);</span><br><span class="line">echo $converted_str;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HELLO PEOPLE</span><br></pre></td></tr></table></figure><h3 id="strtolower-argument"><a href="#strtolower-argument" class="headerlink" title="strtolower(argument)"></a>strtolower(argument)</h3><p>Change to lowercase</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str=&quot;hello people&quot;;</span><br><span class="line">$converted_str=strtoupper($str);</span><br><span class="line">echo &quot;uppercase=&quot;.$converted_str.&quot;&lt;br&gt;&quot;;</span><br><span class="line">$converted_again_str=strtolower($str);</span><br><span class="line">echo &quot;lowercase=&quot;.$converted_again_str;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uppercase=HELLO PEOPLE</span><br><span class="line">lowercase=hello people</span><br></pre></td></tr></table></figure><h3 id="ucfirst-argument"><a href="#ucfirst-argument" class="headerlink" title="ucfirst(argument)"></a>ucfirst(argument)</h3><p>Change first letter to uppercase</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str=&quot;hello people&quot;;</span><br><span class="line">$converted_str=ucfirst($str);</span><br><span class="line">echo $converted_str.&quot;&lt;br&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello people</span><br></pre></td></tr></table></figure><h3 id="lcfirst-argument"><a href="#lcfirst-argument" class="headerlink" title="lcfirst(argument)"></a>lcfirst(argument)</h3><p>Change first letter to upper case for each words</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str=&quot;HELLO PEOPLE&quot;;</span><br><span class="line">$converted_str=lcfirst($str);</span><br><span class="line">echo $converted_str.&quot;&lt;br&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hELLO PEOPLE</span><br></pre></td></tr></table></figure><h3 id="strcmp-argument"><a href="#strcmp-argument" class="headerlink" title="strcmp(argument)"></a>strcmp(argument)</h3><p>To compare string in terms of number of characters</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str1=&quot;HELLO PEOPLE&quot;;</span><br><span class="line">$str2=&quot;HELLO&quot;;</span><br><span class="line">$comparing=strcmp($str1,$str2);</span><br><span class="line">echo $comparing;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><blockquote><p>HELLO had to add more required same letters to right in order to be the same</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str1=&quot;HEL&quot;;</span><br><span class="line">$str2=&quot;HELLO&quot;;</span><br><span class="line">$comparing=strcmp($str1,$str2);</span><br><span class="line">echo $comparing;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-2</span><br></pre></td></tr></table></figure><h3 id="strlen-argument"><a href="#strlen-argument" class="headerlink" title="strlen(argument)"></a>strlen(argument)</h3><p>To display the number of characters</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str1=&quot;HELLO PEOPLE&quot;;</span><br><span class="line">$length=strlen($str1);</span><br><span class="line">echo $length;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><blockquote><p>This included spacing,</p></blockquote><h3 id="substr-str-pos"><a href="#substr-str-pos" class="headerlink" title="substr($str,pos)"></a>substr($str,pos)</h3><p>Cut characters of string</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str1=&quot;HELLO PEOPLE&quot;;</span><br><span class="line">$cut=substr($str1,7);</span><br><span class="line">echo $cut;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EOPLE</span><br></pre></td></tr></table></figure><blockquote><p>The first 7 letters is cut</p></blockquote><h3 id="trim-str-”abc”"><a href="#trim-str-”abc”" class="headerlink" title="trim($str,”abc”)"></a>trim($str,”abc”)</h3><p>To cut characters by specify the characters</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str1=&quot;HELLO PEOPLE&quot;;</span><br><span class="line">$trim=trim($str1,&quot;HEL&quot;);</span><br><span class="line">echo $trim;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O PEOP</span><br></pre></td></tr></table></figure><blockquote><p>The HEL is being cut from the string</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Programming" scheme="http://blog.likweitan.tech/categories/Programming/"/>
    
      <category term="PHP" scheme="http://blog.likweitan.tech/categories/Programming/PHP/"/>
    
    
      <category term="php" scheme="http://blog.likweitan.tech/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>ServerJars: Open a Minecarft Server 教你开一个Minecraft服务器</title>
    <link href="http://blog.likweitan.tech/posts/97bc2bbe/"/>
    <id>http://blog.likweitan.tech/posts/97bc2bbe/</id>
    <published>2020-02-17T13:45:24.000Z</published>
    <updated>2021-05-31T13:13:46.720Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Verify-that-the-latest-version-of-Java-is-installed-验证是否安装了最新版本的-Java"><a href="#Verify-that-the-latest-version-of-Java-is-installed-验证是否安装了最新版本的-Java" class="headerlink" title="Verify that the latest version of Java is installed 验证是否安装了最新版本的 Java"></a>Verify that the latest version of Java is installed 验证是否安装了最新版本的 Java</h1><p>Open a command window and enter the command java -version. If a version number is reported, then check the Java website to see what the most recent version number is.<br>打开命令窗口，然后输入命令 java -version。 如果报告了版本号，请访问 Java 网站以查看最新的版本号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:&gt; java -version</span><br><span class="line">java version &quot;1.8.0_241&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_241-b07)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode)</span><br></pre></td></tr></table></figure><blockquote><p>If you don’t have Java or your version is outdated, then download it at <a href="http://www.java.com/download/">http://www.java.com/download/</a>.<br>如果您没有 Java 或您的版本已过时，请通过以下网址下载 <a href="http://www.java.com/download/">http://www.java.com/download/</a> 。</p></blockquote><h1 id="Starting-the-Minecraft-server-启动-Minecraft-服务器"><a href="#Starting-the-Minecraft-server-启动-Minecraft-服务器" class="headerlink" title="Starting the Minecraft server 启动 Minecraft 服务器"></a>Starting the Minecraft server 启动 Minecraft 服务器</h1><h2 id="Download-server-pack-下载服务器懒人包"><a href="#Download-server-pack-下载服务器懒人包" class="headerlink" title="Download server pack 下载服务器懒人包"></a>Download server pack 下载服务器懒人包</h2><ul><li><a href="https://drive.google.com/drive/folders/1sO24ZxtmBTujj-7qh7HH01qnVszcRc2o?usp=sharing">马上下载</a></li></ul><blockquote><p>After downloading, please put the files in the same folder.<br>下载后请把文件放入同个文件夹里。</p></blockquote><h2 id="打开-start-bat"><a href="#打开-start-bat" class="headerlink" title="打开 start.bat"></a>打开 start.bat</h2><p><img src= "/img/loading.gif" data-lazy-src="https://i.ibb.co/YRW1VMf/Capture1.jpg" alt="a"></p><blockquote><p>这里要等一下给它下载最新的 version</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://i.ibb.co/8P81GdT/Capture2.jpg" alt="a"></p><blockquote><p>下载完毕了之后，他就会停止。</p></blockquote><h2 id="打开-eula-txt"><a href="#打开-eula-txt" class="headerlink" title="打开 eula.txt"></a>打开 eula.txt</h2><p><img src= "/img/loading.gif" data-lazy-src="https://i.ibb.co/7SZCFSw/Capture3.jpg" alt="a"></p><h2 id="把-eula-false-改去-eula-true"><a href="#把-eula-false-改去-eula-true" class="headerlink" title="把 eula=false 改去 eula=true"></a>把 eula=false 改去 eula=true</h2><p><img src= "/img/loading.gif" data-lazy-src="https://i.ibb.co/gPQ3th0/Capture4.jpg" alt="之前"></p><p><img src= "/img/loading.gif" data-lazy-src="https://i.ibb.co/89Chq0m/Capture5.jpg" alt="之后"></p><h2 id="开启-start-bat-就行了"><a href="#开启-start-bat-就行了" class="headerlink" title="开启 start.bat 就行了"></a>开启 start.bat 就行了</h2><p>可以到 localhost 去</p><blockquote><p>这里只限于局内网络</p></blockquote><h1 id="哪里看-ip-address？"><a href="#哪里看-ip-address？" class="headerlink" title="哪里看 ip address？"></a>哪里看 ip address？</h1><h2 id="1-打开-cmd。"><a href="#1-打开-cmd。" class="headerlink" title="1.打开 cmd。"></a>1.打开 cmd。</h2><h2 id="2-写入-ipconfig。"><a href="#2-写入-ipconfig。" class="headerlink" title="2.写入 ipconfig。"></a>2.写入 ipconfig。</h2><h2 id="3-找到-IPv4-Address-就是你的局内网的"><a href="#3-找到-IPv4-Address-就是你的局内网的" class="headerlink" title="3.找到 IPv4 Address 就是你的局内网的"></a>3.找到 IPv4 Address 就是你的局内网的</h2><p>我的 ip address 是 172.18.140.51，如下图。</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.ibb.co/chn3tY8/ip.jpg" alt="之后"></p><h1 id="Configurations-设定"><a href="#Configurations-设定" class="headerlink" title="Configurations 设定"></a>Configurations 设定</h1><p>Update later<br>之后更新</p><h1 id="References-参考"><a href="#References-参考" class="headerlink" title="References 参考"></a>References 参考</h1><p><a href="https://serverjars.com/updater">ServerJars - API</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Server" scheme="http://blog.likweitan.tech/categories/Server/"/>
    
      <category term="Minecraft" scheme="http://blog.likweitan.tech/categories/Server/Minecraft/"/>
    
    
      <category term="minecraft" scheme="http://blog.likweitan.tech/tags/minecraft/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Github: Build your personal blog 建立一个属于你的部落格</title>
    <link href="http://blog.likweitan.tech/posts/9fc84f43/"/>
    <id>http://blog.likweitan.tech/posts/9fc84f43/</id>
    <published>2020-02-14T06:51:37.000Z</published>
    <updated>2021-05-31T13:13:46.718Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="What-is-Hexo-什么是-Hexo？"><a href="#What-is-Hexo-什么是-Hexo？" class="headerlink" title="What is Hexo? 什么是 Hexo？"></a>What is Hexo? 什么是 Hexo？</h1><p>Hexo is a blog framework that can generate static websites. Compared to dynamic websites, a database is needed. The files of static websites are stored on the computer, which will be more convenient for transfer in the future.<br>Hexo 是一個能夠產生靜態網站的網誌框架，相對於動態網站需要有一個資料庫，靜態網站的檔案存在電腦上，將來在轉移的時候也比較方便。你也能够将你的部落格发布在 Github-Pages 上，无需任何费用。</p><blockquote><p>不会编程的也没有关系哦，只要是 Windows 使用者照着以下方法一切都能在 CMD 搞定</p></blockquote><h1 id="Setting-Up-Envinroment"><a href="#Setting-Up-Envinroment" class="headerlink" title="Setting Up Envinroment"></a>Setting Up Envinroment</h1><h2 id="Getting-Ready"><a href="#Getting-Ready" class="headerlink" title="Getting Ready"></a>Getting Ready</h2><p>Make sure that you have installed <a href="https://nodejs.org/">Nodejs</a> and <a href="https://git-scm.com/">Git</a> before proceed to the next step.<br>If you are using Windows</p><ul><li>CMD</li><li>Nodejs</li><li>Git</li></ul><h2 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h2><p>Install Hexo in the terminal with npm.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><blockquote><h3 id="Make-sure-that-Hexo-is-installed-in-your-system"><a href="#Make-sure-that-Hexo-is-installed-in-your-system" class="headerlink" title="Make sure that Hexo is installed in your system"></a>Make sure that Hexo is installed in your system</h3><p>Hexo would not work if it is not installed.<br>如果 Hexo 没有安装成功, 它将不会运行。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br><span class="line">hexo-cli: 0.1.9</span><br><span class="line">os: Darwin 14.3.0 darwin x64</span><br><span class="line">http_parser: 2.3</span><br><span class="line">node: 0.12.7</span><br><span class="line">v8: 3.28.71.19</span><br><span class="line">uv: 1.6.1</span><br><span class="line">zlib: 1.2.8</span><br><span class="line">modules: 14</span><br><span class="line">openssl: 1.0.1p</span><br></pre></td></tr></table></figure><h2 id="Create-a-project"><a href="#Create-a-project" class="headerlink" title="Create a project"></a>Create a project</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog #Initiates a blog 建立部落格</span><br><span class="line">$ cd blog #載入資料夾</span><br><span class="line">$ npm install #安裝npm套件</span><br></pre></td></tr></table></figure><h3 id="Run-a-test"><a href="#Run-a-test" class="headerlink" title="Run a test"></a>Run a test</h3><p>Test the server to see whether it could work successfully.<br>试跑下服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h1 id="How-to-create-new-post"><a href="#How-to-create-new-post" class="headerlink" title="How to create new post?"></a>How to create new post?</h1><h2 id="Create-a-post"><a href="#Create-a-post" class="headerlink" title="Create a post"></a>Create a post</h2><p>这里我们简单的开一个新的文章，文章名称可以随意设定。在这里我们就命名为 first-post。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new first-post</span><br></pre></td></tr></table></figure><h2 id="Edit-post"><a href="#Edit-post" class="headerlink" title="Edit post"></a>Edit post</h2><p>Windows 使用者请到 C:\Users\ <em>这里是你电脑的名字</em> \blog\source_posts 打开你刚刚开的 post 的名字 first-post.md。<br>打开了之后你会看到一下的信息，在这些信息的下面可以写下你的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#x27;first-post&#x27;</span><br><span class="line">date: 2020-02-14 14:51:37</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>因为是 markdown language 这里推荐几款软件</p><p>Online Editor 无需下载</p><ul><li><a href="https://dillinger.io/">Dillinger</a></li></ul><p>Download Editor 需要下载</p><ul><li><a href="https://atom.io/">Atom</a></li><li><a href="https://brackets.io/">Brackets</a></li></ul><blockquote><p>不熟悉 markdown 的<br><a href="https://www.markdownguide.org/">Markdown Guide</a></p></blockquote><h2 id="Load-server"><a href="#Load-server" class="headerlink" title="Load server"></a>Load server</h2><p>使用 hexo server 啟動本地伺服器，來預覽 Hexo 部落格，預設開的 port 為 4000，不過像是下圖，如果 Port 被占用，就無法正常運行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><blockquote><p>在瀏覽器輸入: localhost:4000 就可以看到我們建立好的 Hexo 部落格囉。</p></blockquote><h2 id="Create-a-github-account"><a href="#Create-a-github-account" class="headerlink" title="Create a github account"></a>Create a github account</h2><p><a href="https://github.com/">Github</a><br><img src= "/img/loading.gif" data-lazy-src="https://i.ibb.co/DG6shzL/Untitled.png" alt="alt text" title="Logo Title Text 1"></p><h2 id="Create-a-repository"><a href="#Create-a-repository" class="headerlink" title="Create a repository"></a>Create a repository</h2><p>登陸 Github 帳號並新增一個 repository ，”Repository name” 命名規則為 “用戶名”+”.github.io”。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>進到視窗畫面後依序輸入以下 3 行指令來獲取密鑰文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;github 用戶名&quot;</span><br><span class="line">$ git config --global user.email &quot;github 註冊信箱&quot;</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;github 註冊信箱&quot;</span><br></pre></td></tr></table></figure><h2 id="Take-key"><a href="#Take-key" class="headerlink" title="Take key"></a>Take key</h2><p>進到剛剛產生的密鑰位置，預設位置為”C:\Users\用戶名.ssh”，找到 “id_rsa.pub” 並使用文字文件打開，將所有內容複製起來，待會使用。</p><h1 id="Setup-key"><a href="#Setup-key" class="headerlink" title="Setup key"></a>Setup key</h1><p>回到 Github “Setting” 中的 “SSH and GPG keys”，新增一個 SSH keys，”Title” 名稱可以任取，”key” 就填入剛剛複製的密鑰。<br><img src= "/img/loading.gif" data-lazy-src="https://junyou.tw/wp-content/uploads/2018/12/2018-12-05_21-43-13.jpg" alt="alt text" title="Github SSH and GPG keys"></p><h1 id="Set-information-to-use-Git"><a href="#Set-information-to-use-Git" class="headerlink" title="Set information to use Git"></a>Set information to use Git</h1><p>Install Hexo deployer git in the terminal</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ vi _config.yml</span><br></pre></td></tr></table></figure><p>Open _config.yml file in C:\Users\ <em>username</em> \blog<br>更改 C:\Users\ <em>username</em> \blog_config.yml 里面的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: https://github.com/username/username.github.io</span><br><span class="line">branch: master # remember that GitHub Pages uses this branc</span><br></pre></td></tr></table></figure><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><p>生成靜態檔案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --watch</span><br></pre></td></tr></table></figure><h1 id="Deploy-your-blog-发布"><a href="#Deploy-your-blog-发布" class="headerlink" title="Deploy your blog 发布"></a>Deploy your blog 发布</h1><p>將網站部署到 Github Pages 上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h1 id="Summary-总结"><a href="#Summary-总结" class="headerlink" title="Summary 总结"></a>Summary 总结</h1><p>Hexo is a great environment to post your blog.</p><h1 id="Reference-参考资料"><a href="#Reference-参考资料" class="headerlink" title="Reference 参考资料"></a>Reference 参考资料</h1><p><a href="https://hexo.io/docs/">Documentation | Hexo</a></p><h1 id="Remarks-备注"><a href="#Remarks-备注" class="headerlink" title="Remarks 备注"></a>Remarks 备注</h1><p>Create new a new page or post 新增页面或文章</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] !title!</span><br></pre></td></tr></table></figure><p><strong>layout 布局</strong></p><p>有三种布局个别是 post, page 和 draft</p><table><thead><tr><th>Layout</th><th>Draft</th></tr></thead><tbody><tr><td>post</td><td>source/_posts</td></tr><tr><td>page</td><td>source</td></tr><tr><td>draft</td><td>source/_drafts</td></tr></tbody></table><h2 id="Configurations-设定"><a href="#Configurations-设定" class="headerlink" title="Configurations 设定"></a>Configurations 设定</h2><p><strong>Basic Settings 基本设置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: 網站標題</span><br><span class="line">subtitle: 網站副標題</span><br><span class="line">description: 網站描述</span><br><span class="line">keywords: 網站關鍵字</span><br><span class="line">author: 作者名稱</span><br><span class="line">language: zh-TW</span><br><span class="line">timezone: Asia/Taipei</span><br></pre></td></tr></table></figure><h2 id="Frequent-used-commands-常用指令"><a href="#Frequent-used-commands-常用指令" class="headerlink" title="Frequent used commands 常用指令"></a>Frequent used commands 常用指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate      #產生靜態檔案</span><br><span class="line">$ hexo deploy        #部署至github</span><br><span class="line">$ hexo server        #啟動本地端server</span><br><span class="line">$ hexo new &lt;post&gt;          #新增文章</span><br><span class="line">$ hexo clean         #清除現有的靜態檔案</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      免费的哦
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.likweitan.tech/categories/Linux/"/>
    
      <category term="Hexo" scheme="http://blog.likweitan.tech/categories/Linux/Hexo/"/>
    
    
      <category term="hexo" scheme="http://blog.likweitan.tech/tags/hexo/"/>
    
  </entry>
  
</feed>
